import React, { useEffect } from 'react';
import { useForm } from '@mantine/form';
import { TextInput, Button, Group, NumberInput } from '@mantine/core';

// Sub-Form 1: Personal Info
function SubForm1({ form }) {
  return (
    <div>
      <TextInput
        label="First Name"
        placeholder="Enter your first name"
        {...form.getInputProps('form1.firstName')}
      />
      <TextInput
        label="Last Name"
        placeholder="Enter your last name"
        {...form.getInputProps('form1.lastName')}
      />
      <TextInput
        label="Full Name (Derived)"
        placeholder="Full name will be generated"
        readOnly
        {...form.getInputProps('form1.fullName')}
      />
    </div>
  );
}

// Sub-Form 2: Contact Info
function SubForm2({ form }) {
  return (
    <div>
      <TextInput
        label="Email"
        placeholder="Enter your email"
        {...form.getInputProps('form2.email')}
      />
      <NumberInput
        label="Phone Number"
        placeholder="Enter your phone number"
        {...form.getInputProps('form2.phoneNumber')}
      />
    </div>
  );
}

// Sub-Form 3: Address Info
function SubForm3({ form }) {
  return (
    <div>
      <TextInput
        label="City"
        placeholder="Enter your city"
        {...form.getInputProps('form3.city')}
      />
      <TextInput
        label="Country"
        placeholder="Enter your country"
        {...form.getInputProps('form3.country')}
      />
    </div>
  );
}

// Parent Form
function ParentForm() {
  const form = useForm({
    initialValues: {
      form1: { firstName: '', lastName: '', fullName: '' },
      form2: { email: '', phoneNumber: '' },
      form3: { city: '', country: '' },
    },

    // Validation for the fields
    validate: {
      'form1.firstName': (value) => (value.length < 2 ? 'First name must have at least 2 characters' : null),
      'form1.lastName': (value) => (value.length < 2 ? 'Last name must have at least 2 characters' : null),
      'form2.email': (value) => (/^\S+@\S+$/.test(value) ? null : 'Invalid email'),
      'form2.phoneNumber': (value) => (value.length < 10 ? 'Phone number must be at least 10 characters' : null),
      'form3.city': (value) => (value.length < 2 ? 'City must have at least 2 characters' : null),
      'form3.country': (value) => (value.length < 2 ? 'Country must have at least 2 characters' : null),
    },
  });

  // Effect to derive the fullName from firstName and lastName
  useEffect(() => {
    const fullName = `${form.values.form1.firstName} ${form.values.form1.lastName}`.trim();
    form.setFieldValue('form1.fullName', fullName);
  }, [form.values.form1.firstName, form.values.form1.lastName]);

  // Handle form submission
  const handleSubmit = (values) => {
    console.log('Form Submitted:', values); // Gather all form data, including derived fields
  };

  return (
    <form onSubmit={form.onSubmit(handleSubmit)}>
      <SubForm1 form={form} />
      <SubForm2 form={form} />
      <SubForm3 form={form} />

      <Group position="right" mt="md">
        <Button type="submit">Submit</Button>
      </Group>
    </form>
  );
}

export default ParentForm;
