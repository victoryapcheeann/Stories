1) validation
  cellClassRules: {
        'invalid-cell': (params: any) => !params.value || params.value.trim() === '' // Apply class if the cell is empty or contains only spaces
      }

.invalid-cell {
  background-color: #ffcccc; /* Light red background for invalid cells */
}


2) selected
 <button onClick={toggleShowSelected}>
        {showSelected ? 'Show All Rows' : 'Show Only Selected Rows'}
      </button>

  const toggleShowSelected = () => {
    setShowSelected(!showSelected);
    if (!showSelected) {
      const selectedNodes = gridRef.current!.api.getSelectedNodes();
      const selectedData = selectedNodes.map(node => node.data);
      setDisplayedRows(selectedData); // Show only selected rows
    } else {
      setDisplayedRows(rowData); // Show all rows
    }
  };


3) Custom cell

 if (params.value === 'Complete') {
          return `<span class="status-complete">${params.value}</span>`;
        } else {
          return `<span class="status-incomplete">${params.value}</span>`;
        }


import { CustomCellRendererProps } from '@ag-grid-community/react';
import React from 'react';

export default (params: CustomCellRendererProps) => (
    <span className="missionSpan">
        {
            <img
                alt={`${params.value}`}
                src={`https://www.ag-grid.com/example-assets/icons/${
                    params.value ? 'tick-in-circle' : 'cross-in-circle'
                }.png`}
                className="missionIcon"
            />
        }
    </span>
);

4) pivot
  const defaultColDef = useMemo<ColDef>(() => {
    return {
      flex: 1,
      minWidth: 130,
      enableValue: true,
      enableRowGroup: true,
      enablePivot: true,
    };
  }, []);
  const autoGroupColumnDef = useMemo<ColDef>(() => {
    return {
      minWidth: 200,
      pinned: "left",
    };
  }, []);


          defaultColDef={defaultColDef}
          autoGroupColumnDef={autoGroupColumnDef
