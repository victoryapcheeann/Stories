import React, { useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import './MyGrid.css'; // Import custom CSS

const ProgressBar = (props: any) => {
  const progress = Math.min(100, Math.max(0, props.value)); // Ensure progress is between 0 and 100
  return (
    <div className="progress-bar-container">
      <div className="progress-bar" style={{ width: `${progress}%` }}>
        {progress}%
      </div>
    </div>
  );
};

const AgGridWithProgressBar: React.FC = () => {
  const [rowData] = useState([
    { id: 1, name: 'John', progress: 45 },
    { id: 2, name: 'Jane', progress: 80 },
    { id: 3, name: 'Peter', progress: 60 },
  ]);

  const columnDefs = [
    { field: 'id', headerName: 'ID', editable: false },
    { field: 'name', headerName: 'Name', editable: true },
    {
      field: 'progress',
      headerName: 'Progress',
      editable: true,
      cellRendererFramework: ProgressBar, // Use the custom progress bar renderer
    },
  ];

  return (
    <div>
      <h3>AG Grid with Progress Bars</h3>
      <div
        className="ag-theme-alpine"
        style={{ height: '400px', width: '600px' }}
      >
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
        />
      </div>
    </div>
  );
};

export default AgGridWithProgressBar;



.progress-bar-container {
  background-color: #e0e0e0;
  width: 100%;
  height: 100%;
  position: relative;
  border-radius: 3px;
  overflow: hidden;
}

.progress-bar {
  background-color: #76c7c0;
  height: 100%;
  text-align: center;
  color: white;
  line-height: 30px; /* Adjust this to vertically center the percentage */
  font-weight: bold;
}






import React, { useState, useRef, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const AgGridChangeDetection = () => {
  // Example row data (this can be any dataset)
  const [rowData, setRowData] = useState([
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Peter', age: 35 },
  ]);

  // Store the affected row IDs
  const [affectedRowIds, setAffectedRowIds] = useState([]);

  // Use a ref to keep track of the original data
  const originalDataRef = useRef([]);

  // Store the original data once when the component mounts
  useEffect(() => {
    originalDataRef.current = JSON.parse(JSON.stringify(rowData)); // Deep copy
  }, [rowData]);

  // Column definitions for AG Grid (editable fields)
  const columnDefs = [
    { field: 'id', headerName: 'ID', editable: false },
    { field: 'name', headerName: 'Name', editable: true },
    { field: 'age', headerName: 'Age', editable: true },
  ];

  // Function to handle cell value changes and detect changes between original and modified data
  const onCellValueChanged = (event) => {
    const { data } = event; // The updated row data
    const rowId = data.id;

    // Find the original row by matching the ID
    const originalRow = originalDataRef.current.find((row) => row.id === rowId);

    // Check if the current data has changed from the original
    const isChanged = Object.keys(originalRow).some(
      (key) => originalRow[key] !== data[key]
    );

    setAffectedRowIds((prevIds) => {
      if (isChanged) {
        // Add row ID if changed and not already in the list
        if (!prevIds.includes(rowId)) {
          return [...prevIds, rowId];
        }
      } else {
        // Remove row ID if changes were reverted back to the original state
        return prevIds.filter((id) => id !== rowId);
      }
      return prevIds;
    });
  };

  return (
    <div>
      <h3>Affected Rows: {affectedRowIds.join(', ')}</h3>
      <div className="ag-theme-alpine" style={{ height: '400px', width: '600px' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          onCellValueChanged={onCellValueChanged}
        />
      </div>
    </div>
  );
};

export default AgGridChangeDetection;












import React, { useState, useRef, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

interface RowData {
  id: number;
  name: string;
  age: number;
}


const AgGridChangeDetection: React.FC = () => {
  // Initial row data
  const [rowData, setRowData] = useState<RowData[]>([
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Peter', age: 35 },
  ]);

  // Affected row IDs
  const [affectedRowIds, setAffectedRowIds] = useState<number[]>([]);

  // Store the original data in a reference to avoid reinitializing on re-render
  const originalDataRef = useRef<RowData[]>([]);

  // Initialize original data once when the component mounts
  useEffect(() => {
    originalDataRef.current = [...rowData];
  }, []);

  const columnDefs = [
    { field: 'id', headerName: 'ID', editable: false },
    { field: 'name', headerName: 'Name', editable: true },
    { field: 'age', headerName: 'Age', editable: true },
  ];

  // Function to handle cell value changes
  const onCellValueChanged = (event: any) => {
    const { data } = event; // The updated row data
    const rowId: number = data.id;

    // Find the original row by its ID
    const originalRow = originalDataRef.current.find((row) => row.id === rowId);

    if (originalRow) {
      // Compare the original row with the updated data
      const isChanged = Object.keys(originalRow).some(
        (key) => originalRow[key as keyof RowData] !== data[key as keyof RowData]
      );

      setAffectedRowIds((prevIds) => {
        if (isChanged) {
          // Add the row ID if a change is detected
          if (!prevIds.includes(rowId)) {
            return [...prevIds, rowId];
          }
        } else {
          // Remove the row ID if the row has reverted to its original state
          return prevIds.filter((id) => id !== rowId);
        }
        return prevIds;
      });
    }
  };

  return (
    <div>
      <h3>Affected Rows: {affectedRowIds.join(', ')}</h3>
      <div
        className="ag-theme-alpine"
        style={{ height: '400px', width: '600px' }}
      >
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          onCellValueChanged={onCellValueChanged}
        />
      </div>
    </div>
  );
};

export default AgGridChangeDetection;









import React, { useState, useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

// Define the structure of your row data
interface RowData {
  id: number;
  name: string;
  age: number;
}

const AgGridChangeDetection: React.FC = () => {
  // Initial row data
  const [rowData, setRowData] = useState<RowData[]>([
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Peter', age: 35 },
  ]);

  // Affected row IDs
  const [affectedRowIds, setAffectedRowIds] = useState<number[]>([]);

  // Store the original data
  const originalDataRef = useRef<RowData[]>([...rowData]);

  // Column definitions for AG Grid
  const columnDefs = [
    { field: 'id', headerName: 'ID' },
    { field: 'name', headerName: 'Name', editable: true },
    { field: 'age', headerName: 'Age', editable: true },
  ];

  // Function to handle cell value changes
  const onCellValueChanged = (event: any) => {
    const { data } = event; // The updated row data
    const rowId: number = data.id;

    // Find the original row by its ID
    const originalRow = originalDataRef.current.find((row) => row.id === rowId);

    if (originalRow) {
      // Compare the original row with the updated data
      const isChanged = Object.keys(originalRow).some(
        (key) => (originalRow as any)[key] !== (data as any)[key]
      );

      setAffectedRowIds((prevIds) => {
        if (isChanged) {
          // Add the row ID if a change is detected
          if (!prevIds.includes(rowId)) {
            return [...prevIds, rowId];
          }
        } else {
          // Remove the row ID if the row has reverted to its original state
          return prevIds.filter((id) => id !== rowId);
        }
        return prevIds;
      });
    }
  };

  return (
    <div>
      <h3>Affected Rows: {affectedRowIds.join(', ')}</h3>
      <div
        className="ag-theme-alpine"
        style={{ height: '400px', width: '600px' }}
      >
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          onCellValueChanged={onCellValueChanged}
        />
      </div>
    </div>
  );
};

export default AgGridChangeDetection;




import React, { useState, useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

// Define the structure of your row data
interface RowData {
  id: number;
  name: string;
  age: number;
}

const AgGridChangeDetection: React.FC = () => {
  // Initial row data
  const [rowData, setRowData] = useState<RowData[]>([
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Peter', age: 35 },
  ]);

  // Affected row IDs
  const [affectedRowIds, setAffectedRowIds] = useState<number[]>([]);

  // Store original data for comparison
  const originalDataRef = useRef<RowData[]>([...rowData]);

  // Column definitions for AG Grid
  const columnDefs = [
    { field: 'id', headerName: 'ID' },
    { field: 'name', headerName: 'Name', editable: true },
    { field: 'age', headerName: 'Age', editable: true },
  ];

  // Function to handle cell value changes
  const onCellValueChanged = (event: any) => {
    const { data } = event;
    const rowId: number = data.id;

    // Find the original row by its ID
    const originalRow = originalDataRef.current.find(row => row.id === rowId);

    // If the original row is found, check if any field has changed
    if (originalRow) {
      const isChanged = Object.keys(originalRow).some(
        (key) => (originalRow as any)[key] !== (data as any)[key]
      );

      // Update affectedRowIds state based on whether a change was detected or reverted
      setAffectedRowIds((prevIds) => {
        if (isChanged) {
          // Add the row ID if a change is detected and it's not already in the list
          if (!prevIds.includes(rowId)) {
            return [...prevIds, rowId];
          }
        } else {
          // Remove the row ID if the row has reverted to its original state
          return prevIds.filter(id => id !== rowId);
        }
        return prevIds;
      });
    }
  };

  return (
    <div>
      <h3>Affected Rows: {affectedRowIds.join(', ')}</h3>
      <div className="ag-theme-alpine" style={{ height: '400px', width: '600px' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          onCellValueChanged={onCellValueChanged}
          rowSelection="multiple"
        />
      </div>
    </div>
  );
};

export default AgGridChangeDetection;




import React, { useState, useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const AgGridChangeDetection = () => {
  const [rowData, setRowData] = useState([
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Peter', age: 35 },
  ]);

  const [affectedRowIds, setAffectedRowIds] = useState([]);
  const originalDataRef = useRef([...rowData]); // Store the original row data

  const columnDefs = [
    { field: 'id', headerName: 'ID' },
    { field: 'name', headerName: 'Name', editable: true },
    { field: 'age', headerName: 'Age', editable: true },
  ];

  const onCellValueChanged = (event) => {
    const { data } = event;
    const rowId = data.id;
    const originalRow = originalDataRef.current.find(row => row.id === rowId);
    
    const isChanged = Object.keys(originalRow).some(
      key => originalRow[key] !== data[key]
    );

    setAffectedRowIds(prevIds => {
      if (isChanged) {
        if (!prevIds.includes(rowId)) {
          return [...prevIds, rowId]; // Add the row ID if it's changed
        }
      } else {
        // If no change, remove the row ID from affectedRowIds
        return prevIds.filter(id => id !== rowId);
      }
      return prevIds;
    });
  };

  return (
    <div>
      <h3>Affected Rows: {affectedRowIds.join(', ')}</h3>
      <div
        className="ag-theme-alpine"
        style={{ height: '400px', width: '600px' }}
      >
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          onCellValueChanged={onCellValueChanged}
          rowSelection="multiple"
        />
      </div>
    </div>
  );
};

export default AgGridChangeDetection;





import React, { useState, useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const AgGridChangeDetection = () => {
  const [rowData, setRowData] = useState([
    { id: 1, name: 'John', age: 30 },
    { id: 2, name: 'Jane', age: 25 },
    { id: 3, name: 'Peter', age: 35 },
  ]);
  
  const [affectedRowIds, setAffectedRowIds] = useState([]);
  
  const gridRef = useRef();

  const columnDefs = [
    { field: 'id', headerName: 'ID' },
    { field: 'name', headerName: 'Name', editable: true },
    { field: 'age', headerName: 'Age', editable: true },
  ];

  const onCellValueChanged = (event) => {
    const rowId = event.data.id;
    setAffectedRowIds(prevIds => {
      if (!prevIds.includes(rowId)) {
        return [...prevIds, rowId];
      }
      return prevIds;
    });
  };

  return (
    <div>
      <h3>Affected Rows: {affectedRowIds.join(', ')}</h3>
      <div
        className="ag-theme-alpine"
        style={{ height: '400px', width: '600px' }}
      >
        <AgGridReact
          ref={gridRef}
          rowData={rowData}
          columnDefs={columnDefs}
          onCellValueChanged={onCellValueChanged}
          rowSelection="multiple"
        />
      </div>
    </div>
  );
};

export default AgGridChangeDetection;




import React, { useState, useRef, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const App: React.FC = () => {
  const [rowData] = useState([
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Smith', age: 30 },
    { id: 3, name: 'Sam Johnson', age: 40 },
    { id: 4, name: 'Chris Lee', age: 35 }
  ]);

  const [columnDefs] = useState([
    { headerCheckboxSelection: true, checkboxSelection: true, width: 50, pinned: 'left' },
    { field: 'name', headerName: 'Name', sortable: true, filter: true },
    { field: 'age', headerName: 'Age', sortable: true, filter: true }
  ]);

  const gridRef = useRef<AgGridReact>(null);
  const [gridApi, setGridApi] = useState<any>(null);
  const [showSelected, setShowSelected] = useState(false);
  const [displayedRows, setDisplayedRows] = useState(rowData);
  const [selectedIds, setSelectedIds] = useState<number[]>([]);

  // Save the selected row IDs
  const getSelectedRowIds = () => {
    const selectedNodes = gridApi.getSelectedNodes();
    const selectedData = selectedNodes.map((node: any) => node.data.id);
    setSelectedIds(selectedData);
  };

  // Toggle between showing all rows and only selected rows
  const toggleShowSelected = () => {
    setShowSelected(!showSelected);

    // Before toggling, get selected row IDs
    getSelectedRowIds();

    if (!showSelected) {
      const selectedNodes = gridApi.getSelectedNodes();
      const selectedData = selectedNodes.map((node: any) => node.data);
      setDisplayedRows(selectedData); // Show only selected rows
    } else {
      setDisplayedRows(rowData); // Show all rows
    }
  };

  // Restore selected rows when data changes
  useEffect(() => {
    if (gridApi) {
      gridApi.forEachNode((node: any) => {
        if (selectedIds.includes(node.data.id)) {
          node.setSelected(true);
        }
      });
    }
  }, [displayedRows, selectedIds, gridApi]);

  // Capture the grid API when the grid is ready
  const onGridReady = (params: any) => {
    setGridApi(params.api);
  };

  return (
    <div>
      <button onClick={toggleShowSelected}>
        {showSelected ? 'Show All Rows' : 'Show Only Selected Rows'}
      </button>
      <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
        <AgGridReact
          ref={gridRef}
          rowData={displayedRows}
          columnDefs={columnDefs}
          rowSelection="multiple"
          onGridReady={onGridReady} // Set the grid API when ready
        />
      </div>
    </div>
  );
};

export default App;



1) validation
  cellClassRules: {
        'invalid-cell': (params: any) => !params.value || params.value.trim() === '' // Apply class if the cell is empty or contains only spaces
      }

.invalid-cell {
  background-color: #ffcccc; /* Light red background for invalid cells */
}


2) selected
 <button onClick={toggleShowSelected}>
        {showSelected ? 'Show All Rows' : 'Show Only Selected Rows'}
      </button>

  const toggleShowSelected = () => {
    setShowSelected(!showSelected);
    if (!showSelected) {
      const selectedNodes = gridRef.current!.api.getSelectedNodes();
      const selectedData = selectedNodes.map(node => node.data);
      setDisplayedRows(selectedData); // Show only selected rows
    } else {
      setDisplayedRows(rowData); // Show all rows
    }
  };


3) Custom cell

 if (params.value === 'Complete') {
          return `<span class="status-complete">${params.value}</span>`;
        } else {
          return `<span class="status-incomplete">${params.value}</span>`;
        }


import { CustomCellRendererProps } from '@ag-grid-community/react';
import React from 'react';

export default (params: CustomCellRendererProps) => (
    <span className="missionSpan">
        {
            <img
                alt={`${params.value}`}
                src={`https://www.ag-grid.com/example-assets/icons/${
                    params.value ? 'tick-in-circle' : 'cross-in-circle'
                }.png`}
                className="missionIcon"
            />
        }
    </span>
);

4) pivot
  const defaultColDef = useMemo<ColDef>(() => {
    return {
      flex: 1,
      minWidth: 130,
      enableValue: true,
      enableRowGroup: true,
      enablePivot: true,
    };
  }, []);
  const autoGroupColumnDef = useMemo<ColDef>(() => {
    return {
      minWidth: 200,
      pinned: "left",
    };
  }, []);


          defaultColDef={defaultColDef}
          autoGroupColumnDef={autoGroupColumnDef
