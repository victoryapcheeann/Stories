import React, { useState, useRef, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const App: React.FC = () => {
  const [rowData] = useState([
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Smith', age: 30 },
    { id: 3, name: 'Sam Johnson', age: 40 },
    { id: 4, name: 'Chris Lee', age: 35 }
  ]);

  const [columnDefs] = useState([
    { headerCheckboxSelection: true, checkboxSelection: true, width: 50, pinned: 'left' },
    { field: 'name', headerName: 'Name', sortable: true, filter: true },
    { field: 'age', headerName: 'Age', sortable: true, filter: true }
  ]);

  const gridRef = useRef<AgGridReact>(null);
  const [gridApi, setGridApi] = useState<any>(null);
  const [showSelected, setShowSelected] = useState(false);
  const [displayedRows, setDisplayedRows] = useState(rowData);
  const [selectedIds, setSelectedIds] = useState<number[]>([]);

  // Save the selected row IDs
  const getSelectedRowIds = () => {
    const selectedNodes = gridApi.getSelectedNodes();
    const selectedData = selectedNodes.map((node: any) => node.data.id);
    setSelectedIds(selectedData);
  };

  // Toggle between showing all rows and only selected rows
  const toggleShowSelected = () => {
    setShowSelected(!showSelected);

    // Before toggling, get selected row IDs
    getSelectedRowIds();

    if (!showSelected) {
      const selectedNodes = gridApi.getSelectedNodes();
      const selectedData = selectedNodes.map((node: any) => node.data);
      setDisplayedRows(selectedData); // Show only selected rows
    } else {
      setDisplayedRows(rowData); // Show all rows
    }
  };

  // Restore selected rows when data changes
  useEffect(() => {
    if (gridApi) {
      gridApi.forEachNode((node: any) => {
        if (selectedIds.includes(node.data.id)) {
          node.setSelected(true);
        }
      });
    }
  }, [displayedRows, selectedIds, gridApi]);

  // Capture the grid API when the grid is ready
  const onGridReady = (params: any) => {
    setGridApi(params.api);
  };

  return (
    <div>
      <button onClick={toggleShowSelected}>
        {showSelected ? 'Show All Rows' : 'Show Only Selected Rows'}
      </button>
      <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
        <AgGridReact
          ref={gridRef}
          rowData={displayedRows}
          columnDefs={columnDefs}
          rowSelection="multiple"
          onGridReady={onGridReady} // Set the grid API when ready
        />
      </div>
    </div>
  );
};

export default App;



1) validation
  cellClassRules: {
        'invalid-cell': (params: any) => !params.value || params.value.trim() === '' // Apply class if the cell is empty or contains only spaces
      }

.invalid-cell {
  background-color: #ffcccc; /* Light red background for invalid cells */
}


2) selected
 <button onClick={toggleShowSelected}>
        {showSelected ? 'Show All Rows' : 'Show Only Selected Rows'}
      </button>

  const toggleShowSelected = () => {
    setShowSelected(!showSelected);
    if (!showSelected) {
      const selectedNodes = gridRef.current!.api.getSelectedNodes();
      const selectedData = selectedNodes.map(node => node.data);
      setDisplayedRows(selectedData); // Show only selected rows
    } else {
      setDisplayedRows(rowData); // Show all rows
    }
  };


3) Custom cell

 if (params.value === 'Complete') {
          return `<span class="status-complete">${params.value}</span>`;
        } else {
          return `<span class="status-incomplete">${params.value}</span>`;
        }


import { CustomCellRendererProps } from '@ag-grid-community/react';
import React from 'react';

export default (params: CustomCellRendererProps) => (
    <span className="missionSpan">
        {
            <img
                alt={`${params.value}`}
                src={`https://www.ag-grid.com/example-assets/icons/${
                    params.value ? 'tick-in-circle' : 'cross-in-circle'
                }.png`}
                className="missionIcon"
            />
        }
    </span>
);

4) pivot
  const defaultColDef = useMemo<ColDef>(() => {
    return {
      flex: 1,
      minWidth: 130,
      enableValue: true,
      enableRowGroup: true,
      enablePivot: true,
    };
  }, []);
  const autoGroupColumnDef = useMemo<ColDef>(() => {
    return {
      minWidth: 200,
      pinned: "left",
    };
  }, []);


          defaultColDef={defaultColDef}
          autoGroupColumnDef={autoGroupColumnDef
