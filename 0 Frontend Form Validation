// Reusable validation functions
function checkFieldExists(field, value) {
    if (!value) {
        return `${field} is required.`;
    }
    return null;
}

function checkCharacterCount(field, value, minLength = 1, maxLength = 100) {
    if (value.length < minLength) {
        return `${field} must be at least ${minLength} characters.`;
    }
    if (value.length > maxLength) {
        return `${field} must be no more than ${maxLength} characters.`;
    }
    return null;
}

function checkSpecialCharacters(field, value) {
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>]/;
    if (!specialCharPattern.test(value)) {
        return `${field} must contain at least one special character.`;
    }
    return null;
}

// Validation logic map for each field
const validationMap = {
    name: (value) => checkFieldExists('Name', value) || checkCharacterCount('Name', value, 2),
    email: (value) => checkFieldExists('Email', value) || (/^\S+@\S+$/.test(value) ? null : 'Invalid email'),
    age: (value) => checkFieldExists('Age', value) || (value < 18 ? 'You must be at least 18 to register' : null),
    password: (value) => checkFieldExists('Password', value) || checkCharacterCount('Password', value, 8) || checkSpecialCharacters('Password', value)
};

// Generic validation function
function validateField(field, value) {
    const validate = validationMap[field];
    if (!validate) {
        return `No validation logic found for ${field}`;
    }
    return validate(value);
}

// Example usage
const nameResult = validateField('name', 'J');
const emailResult = validateField('email', 'invalidemail.com');
const ageResult = validateField('age', 16);
const passwordResult = validateField('password', 'password123');

console.log(nameResult); // Output: "Name must be at least 2 characters."
console.log(emailResult); // Output: "Invalid email"
console.log(ageResult); // Output: "You must be at least 18 to register"
console.log(passwordResult); // Output: "Password must contain at least one special character."
