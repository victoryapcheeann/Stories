import React from "react";
import { render, screen } from "@testing-library/react";
import MyComponent from "./MyComponent";

// Mock useRouter from Next.js
jest.mock("next/router", () => ({
  useRouter: jest.fn()
}));

test("renders the page with a mocked router query param", () => {
  // Mock router.query to return an ID
  require("next/router").useRouter.mockReturnValue({
    query: { id: "123" },
    push: jest.fn(), // Mock push if needed
    prefetch: jest.fn()
  });

  render(<MyComponent />);

  // Check if it renders with the mocked ID
  expect(screen.getByText("Page ID: 123")).toBeInTheDocument();
});






To ensure Jest is correctly set up to run with TypeScript and JSX (`.tsx`), you need to update the **`package.json`** with the correct Jest configuration.

---

## **âœ… Step 1: Update `package.json`**
Modify your `package.json` to include the correct Jest settings:
```json
{
  "scripts": {
    "test": "jest --coverage",
    "test:watch": "jest --watch",
    "test:ci": "jest --runInBand --coverage"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "jsdom",
    "collectCoverage": true,
    "collectCoverageFrom": [
      "src/**/*.{ts,tsx}",  // Include TypeScript files for coverage
      "!src/**/index.ts",   // Exclude index files
      "!src/**/*.test.tsx", // Exclude test files
      "!src/**/*.test.ts"   // Exclude test files
    ],
    "coverageReporters": ["json", "lcov", "text", "clover"],
    "moduleFileExtensions": ["ts", "tsx", "js", "jsx"],
    "transform": {
      "^.+\\.tsx?$": "ts-jest" // Ensure Jest transforms TypeScript files
    }
  }
}
```

---

## **âœ… Step 2: Install Necessary Packages**
Run the following if not installed:
```bash
npm install --save-dev jest ts-jest @testing-library/react @testing-library/jest-dom @types/jest
```

---

## **âœ… Step 3: Run Tests**
Now you can run tests using:
```bash
npm test
```
or in **watch mode**:
```bash
npm run test:watch
```
or in **CI mode** (ensures a single process runs tests):
```bash
npm run test:ci
```

---

## **âœ… Step 4: Clear Jest Cache if Coverage is Incorrect**
If Jest is still only tracking `.js` files, clear the cache:
```bash
npx jest --clearCache
npx jest --no-cache --coverage
```

---

## **ðŸ”¥ Final Debugging**
If Jest still isn't working:
1. **Check `tsconfig.json`**, ensuring:
   ```json
   {
     "compilerOptions": {
       "module": "CommonJS",
       "target": "ES6",
       "jsx": "react-jsx",
       "noEmit": true
     }
   }
   ```
2. **Check that `jest.config.js` isn't overriding `package.json`**.
3. **Run Jest with verbose logging**:
   ```bash
   npx jest --verbose
   ```

Let me know if you're still stuck! ðŸš€
