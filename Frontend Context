Here’s how you can implement **state sharing** using **Context API** in a TypeScript-based React app.

### 1. **Create the context with TypeScript**

First, define the types for your shared state and context.

```tsx
import React, { createContext, useState, ReactNode } from 'react';

// Define the types for the shared state and the set function
interface MyContextType {
  sharedState: string;
  setSharedState: React.Dispatch<React.SetStateAction<string>>;
}

// Create a default context with empty functions to avoid undefined errors
export const MyContext = createContext<MyContextType>({
  sharedState: '',
  setSharedState: () => {}
});

// Create a provider component
interface MyProviderProps {
  children: ReactNode;
}

export const MyProvider: React.FC<MyProviderProps> = ({ children }) => {
  const [sharedState, setSharedState] = useState<string>('Initial state');

  return (
    <MyContext.Provider value={{ sharedState, setSharedState }}>
      {children}
    </MyContext.Provider>
  );
};
```

### 2. **Wrap your app in the context provider**

Make sure you wrap the part of the app (or the entire app) where you need access to the shared state with `MyProvider`.

```tsx
import { MyProvider } from './path_to_provider';
import React from 'react';

const App: React.FC = () => {
  return (
    <MyProvider>
      {/* Your Router or Pages here */}
    </MyProvider>
  );
}

export default App;
```

### 3. **Access the shared state and setState in different pages**

You can now access the shared state and `setState` in any component using `useContext`.

#### PageOne.tsx
```tsx
import React, { useContext } from 'react';
import { MyContext } from './path_to_provider';

const PageOne: React.FC = () => {
  const { sharedState, setSharedState } = useContext(MyContext);

  return (
    <div>
      <p>Shared State: {sharedState}</p>
      <button onClick={() => setSharedState('Updated state from Page One')}>
        Update State
      </button>
    </div>
  );
};

export default PageOne;
```

#### PageTwo.tsx
```tsx
import React, { useContext } from 'react';
import { MyContext } from './path_to_provider';

const PageTwo: React.FC = () => {
  const { sharedState } = useContext(MyContext);

  return (
    <div>
      <p>Shared State on Page Two: {sharedState}</p>
    </div>
  );
};

export default PageTwo;
```

### 4. **Using Router Navigation (Optional)**

If you are using Next.js or any other router, you can navigate between pages while maintaining the shared state through the context.

```tsx
import { useRouter } from 'next/router';
import React, { useContext } from 'react';
import { MyContext } from './path_to_provider';

const PageOne: React.FC = () => {
  const { sharedState, setSharedState } = useContext(MyContext);
  const router = useRouter();

  const goToPageTwo = () => {
    setSharedState('Updated state from Page One');
    router.push('/pageTwo'); // Use your routing method
  };

  return (
    <div>
      <p>Shared State: {sharedState}</p>
      <button onClick={goToPageTwo}>Go to Page Two</button>
    </div>
  );
};

export default PageOne;
```

With this approach, you can share the state and the `setState` function across multiple pages without prop-drilling, ensuring cleaner and more maintainable code. The TypeScript typings also ensure you get full type safety across your app.





To share state and the ability to update that state (`setState`) between two different pages in React when using `router.push`, you can approach it in a few different ways:

### 1. **Using Context API**
The **Context API** allows you to share state across different components and pages without having to pass props through every level. Here’s how you can do it:

#### Step 1: Create a context

```jsx
import React, { createContext, useState } from 'react';

// Create the context
export const MyContext = createContext();

export const MyProvider = ({ children }) => {
  const [sharedState, setSharedState] = useState('Initial state');

  return (
    <MyContext.Provider value={{ sharedState, setSharedState }}>
      {children}
    </MyContext.Provider>
  );
};
```

#### Step 2: Wrap your app in the context provider

You need to wrap your entire application or at least the part that requires access to the shared state with the `MyProvider`.

```jsx
import { MyProvider } from './path_to_provider';

function App() {
  return (
    <MyProvider>
      {/* Your router or page components here */}
    </MyProvider>
  );
}

export default App;
```

#### Step 3: Access shared state and setState in pages

In any component or page, you can now use the shared state and `setState` via the `useContext` hook.

```jsx
import React, { useContext } from 'react';
import { MyContext } from './path_to_provider';

const PageOne = () => {
  const { sharedState, setSharedState } = useContext(MyContext);

  return (
    <div>
      <p>Shared State: {sharedState}</p>
      <button onClick={() => setSharedState('Updated state from Page One')}>
        Update State
      </button>
    </div>
  );
};

export default PageOne;
```

You can do the same on the second page to access or update the state.

### 2. **Passing State through Router**
If you want to pass the state through `router.push` directly, you can pass the state as part of the query or route params, but this won’t let you pass the `setState` function. This is not ideal for `setState`, but here’s how you can pass the current state:

```jsx
router.push({
  pathname: '/nextPage',
  query: { stateValue: sharedState }
});
```

And then, in the next page, you can access it using `useRouter`:

```jsx
import { useRouter } from 'next/router';

const NextPage = () => {
  const router = useRouter();
  const { stateValue } = router.query;

  return <div>Received state: {stateValue}</div>;
};
```

However, this method is more suitable for state that you don't need to modify frequently.

### 3. **Using Global State Libraries**
If your app scales and you need more complex state management, libraries like **Redux**, **Recoil**, or **Zustand** can help manage shared state more effectively.

### Final Recommendation
For most cases in React, especially if you're not using complex state management, **Context API** is the cleanest and most React-friendly way to share state between pages, especially for small to medium-sized applications.
