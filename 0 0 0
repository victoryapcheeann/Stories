If your steps (components) are being imported and passed as parameters, you can structure your code in a way that allows dynamic rendering of these steps, making it reusable and scalable without needing to manually hard-code each step.

Here’s an improved version that accommodates dynamically imported steps passed as parameters:

### Approach:

1. **Pass Step Components as Parameters**: Instead of hardcoding the components in the parent component, you can pass an array of components as a prop or parameter.
   
2. **Manage State for the Current Step**: You can keep track of the current step using `useState` and then dynamically render the appropriate component from the array.

3. **Pass Required Props to Each Step**: The parent can handle common logic like `onNext`, `onBack`, and any shared data, which can be passed to the steps.

### Example in TypeScript:

```tsx
import React, { useState } from 'react';
import { Stepper, Step } from 'martine-ui'; // Adjust the import for your UI library

interface StepProps {
  onNext: () => void;
  onBack: () => void;
  stepData: StepData;
}

interface StepData {
  param1: string;
  param2: number;
  param3: boolean;
  // Add more as needed
}

interface StepConfig {
  label: string;
  component: React.ComponentType<StepProps>;
}

interface ParentComponentProps {
  steps: StepConfig[];
}

const ParentComponent: React.FC<ParentComponentProps> = ({ steps }) => {
  const [activeStep, setActiveStep] = useState<number>(0);
  const [stepData, setStepData] = useState<StepData>({
    param1: 'Initial value',
    param2: 42,
    param3: true,
    // Initialize other parameters
  });

  const handleNext = () => {
    setActiveStep((prevStep) => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const StepComponent = steps[activeStep].component;

  return (
    <div>
      <Stepper activeStep={activeStep}>
        {steps.map((step, index) => (
          <Step key={index}>{step.label}</Step>
        ))}
      </Stepper>

      <StepComponent onNext={handleNext} onBack={handleBack} stepData={stepData} />

      <div>
        <button disabled={activeStep === 0} onClick={handleBack}>
          Back
        </button>
        <button onClick={handleNext}>
          {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
        </button>
      </div>
    </div>
  );
};

// Example step components
const Step1: React.FC<StepProps> = ({ onNext, onBack, stepData }) => (
  <div>
    <h2>Step 1</h2>
    <p>Param1: {stepData.param1}</p>
    <button onClick={onNext}>Next</button>
  </div>
);

const Step2: React.FC<StepProps> = ({ onNext, onBack, stepData }) => (
  <div>
    <h2>Step 2</h2>
    <p>Param2: {stepData.param2}</p>
    <button onClick={onBack}>Back</button>
    <button onClick={onNext}>Next</button>
  </div>
);

// Usage of ParentComponent with dynamic steps
const steps: StepConfig[] = [
  { label: 'Step 1', component: Step1 },
  { label: 'Step 2', component: Step2 },
  // Add more steps dynamically
];

const App: React.FC = () => {
  return <ParentComponent steps={steps} />;
};

export default App;
```

### Breakdown:

1. **Dynamic Step Rendering**: 
   - The `ParentComponent` takes an array of `steps` as a prop, where each step contains a label and a corresponding component.
   - It renders the current step dynamically using `steps[activeStep].component`.

2. **Common Logic in Parent Component**:
   - Functions like `handleNext`, `handleBack`, and any shared data (`stepData`) are managed by the parent component and passed down to each step component via props.

3. **Step Components**:
   - Each step component (`Step1`, `Step2`, etc.) receives `onNext`, `onBack`, and `stepData` as props. This keeps the individual steps flexible and reusable.

4. **Dynamic Step List**:
   - You can dynamically modify the steps list (`steps`), and the `ParentComponent` will render the appropriate step and manage transitions between steps without needing to modify the core logic.

### Advantages:
- **Reusability**: The `ParentComponent` can handle any number of steps, and you only need to pass them as parameters.
- **Maintainability**: You can easily add, remove, or modify steps without changing the core stepper logic.
- **Scalability**: This approach can handle complex flows where each step might have very different logic or forms.

By using this approach, you can manage steps more efficiently, even if the number of parameters or the complexity of each step grows.




Here's the same approach, but using TypeScript:

```tsx
import { useState } from 'react';
import { Stepper, Step } from 'martine-ui'; // Adjust the import for your UI library

interface StepProps {
  onNext: () => void;
}

const ParentComponent: React.FC = () => {
  const [activeStep, setActiveStep] = useState<number>(0);

  const handleNext = () => {
    setActiveStep((prevStep) => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const steps: Array<{ label: string; content: JSX.Element }> = [
    { label: 'Step 1', content: <Step1 onNext={handleNext} /> },
    { label: 'Step 2', content: <Step2 onNext={handleNext} /> },
    { label: 'Step 3', content: <Step3 onNext={handleNext} /> },
  ];

  return (
    <div>
      <Stepper activeStep={activeStep}>
        {steps.map((step, index) => (
          <Step key={index}>{step.label}</Step>
        ))}
      </Stepper>
      {steps[activeStep].content}
      <button disabled={activeStep === 0} onClick={handleBack}>
        Back
      </button>
      <button onClick={handleNext}>Next</button>
    </div>
  );
};

const Step1: React.FC<StepProps> = ({ onNext }) => (
  <div>
    <p>Step 1 Content</p>
    <button onClick={onNext}>Next</button>
  </div>
);

const Step2: React.FC<StepProps> = ({ onNext }) => (
  <div>
    <p>Step 2 Content</p>
    <button onClick={onNext}>Next</button>
  </div>
);

const Step3: React.FC<StepProps> = ({ onNext }) => (
  <div>
    <p>Step 3 Content</p>
    <button onClick={onNext}>Finish</button>
  </div>
);

export default ParentComponent;
```

### Explanation of TypeScript Usage:

1. **Defining Props Interface**: The `StepProps` interface defines the props that each step component (`Step1`, `Step2`, etc.) will receive. Here, `onNext` is a function that returns `void`, which means it doesn't return a value.

    ```ts
    interface StepProps {
      onNext: () => void;
    }
    ```

2. **Type Annotations for useState**: The `useState` hook is typed as `number` since `activeStep` will always be a number.

    ```ts
    const [activeStep, setActiveStep] = useState<number>(0);
    ```

3. **Type Annotations for Steps Array**: The `steps` array is typed as an array of objects containing `label` (a `string`) and `content` (a `JSX.Element`).

    ```ts
    const steps: Array<{ label: string; content: JSX.Element }> = ...
    ```

4. **Step Components**: Each step component (like `Step1`, `Step2`) is typed as `React.FC<StepProps>`, meaning it’s a functional component that accepts `StepProps`.

This ensures type safety, especially when passing functions like `onNext` between components. It will help catch errors early in development while keeping the code reusable.




Yes, it is possible to make the Martine UI stepper function reusable with different components for each part. Here’s how you can approach it:

1. **Create a Parent Component**: This will hold the stepper state and manage the steps. The parent component will pass down the current step and the `onNext` function to the child components.

2. **Define the Stepper Logic**: The parent component will control the progression through the steps, keeping track of the current step and passing the step change logic (`onNext`, `onPrevious`) to the child components.

3. **Pass onNext as Props**: For each step component, pass the `onNext` function as a prop so that each component can trigger the next step when needed.

4. **Handle Dynamic Logic in onNext**: In the parent component, `onNext` can be designed to handle different logic for different steps, either by using conditions or by attaching specific logic to the respective step.

Here’s a rough outline in React:

```jsx
import { useState } from 'react';
import { Stepper, Step } from 'martine-ui'; // Adjust as needed for your UI library

const ParentComponent = () => {
  const [activeStep, setActiveStep] = useState(0);

  const handleNext = () => {
    setActiveStep(prevStep => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep(prevStep => prevStep - 1);
  };

  const steps = [
    { label: 'Step 1', content: <Step1 onNext={handleNext} /> },
    { label: 'Step 2', content: <Step2 onNext={handleNext} /> },
    { label: 'Step 3', content: <Step3 onNext={handleNext} /> },
  ];

  return (
    <div>
      <Stepper activeStep={activeStep}>
        {steps.map((step, index) => (
          <Step key={index}>{step.label}</Step>
        ))}
      </Stepper>
      {steps[activeStep].content}
      <button disabled={activeStep === 0} onClick={handleBack}>Back</button>
      <button onClick={handleNext}>Next</button>
    </div>
  );
};

const Step1 = ({ onNext }) => (
  <div>
    <p>Step 1 Content</p>
    <button onClick={onNext}>Next</button>
  </div>
);

const Step2 = ({ onNext }) => (
  <div>
    <p>Step 2 Content</p>
    <button onClick={onNext}>Next</button>
  </div>
);

const Step3 = ({ onNext }) => (
  <div>
    <p>Step 3 Content</p>
    <button onClick={onNext}>Finish</button>
  </div>
);

export default ParentComponent;
```

**Key Concepts**:
- Each step is represented by a separate component that receives the `onNext` function as a prop.
- The parent component manages the stepper's state and handles advancing the steps.
- You can customize the `onNext` function in the parent component to handle different logic per step.

This approach keeps the stepper reusable and allows you to pass unique logic to each step.





import React from 'react';

function FileDownloadComponent() {
  const handleDownload = async () => {
    // Fetch the encoded file from the backend
    const response = await fetch('/get-encoded-file');
    const { encoded_content, mime_type } = await response.json();

    // Decode the base64 content into binary
    const byteCharacters = atob(encoded_content);  // Decode base64 string to binary characters
    const byteNumbers = Array.from(byteCharacters).map((char) => char.charCodeAt(0));  // Convert to byte numbers
    const byteArray = new Uint8Array(byteNumbers);  // Create a Uint8Array from byte numbers

    // Create a Blob from the byte array
    const blob = new Blob([byteArray], { type: mime_type });

    // Create a link element and trigger download
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'example.pdf';  // You can set the file name dynamically
    link.click();  // Trigger the download
  };

  return (
    <div>
      <button onClick={handleDownload}>Download File</button>
    </div>
  );
}

export default FileDownloadComponent;





from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
import base64
import os

app = FastAPI()

ENCODED_FILE_PATH = "encoded_files"  # Folder where encoded files are stored
DECODED_FILE_PATH = "decoded_files"  # Folder where decoded files will be saved

# Hardcoded file values for testing
HARDCODED_FILE_NAME = "example.pdf"  # Hardcoded file name
HARDCODED_MIME_TYPE = "application/pdf"  # Hardcoded MIME type

@app.get("/download-file/")
async def download_file():
    """Decode the hardcoded base64 file and return the decoded file for download."""
    try:
        # Hardcoded encoded file path
        encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{HARDCODED_FILE_NAME}.txt")
        
        # Check if the hardcoded encoded file exists
        if not os.path.exists(encoded_file_path):
            raise HTTPException(status_code=404, detail=f"Encoded file not found at {encoded_file_path}")
        
        # Log to check the file path
        print(f"Encoded file path: {encoded_file_path}")
        
        # Open and read the encoded file (ensuring correct file read mode)
        try:
            with open(encoded_file_path, 'r') as encoded_file:
                encoded_content = encoded_file.read()
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to read encoded file: {str(e)}")
        
        # Log to check the length of the encoded content
        print(f"Encoded content length: {len(encoded_content)}")

        # Decode the base64 content
        try:
            decoded_content = base64.b64decode(encoded_content)
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to decode base64 content: {str(e)}")
        
        # Hardcoded decoded file path
        decoded_file_path = os.path.join(DECODED_FILE_PATH, HARDCODED_FILE_NAME)
        
        # Save the decoded content to a file
        try:
            with open(decoded_file_path, 'wb') as decoded_file:
                decoded_file.write(decoded_content)
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Failed to save decoded file: {str(e)}")

        # Verify if the file was successfully saved
        if not os.path.exists(decoded_file_path):
            raise HTTPException(status_code=500, detail="Decoded file could not be saved")

        # Serve the decoded file for download
        return FileResponse(decoded_file_path, media_type=HARDCODED_MIME_TYPE, filename=HARDCODED_FILE_NAME)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")








@app.get("/download-file/")
async def download_file():
    """Decode the hardcoded base64 file and return the decoded file for download."""
    try:
        # Hardcoded encoded file path
        encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{HARDCODED_FILE_NAME}.txt")
        
        # Check if the hardcoded encoded file exists
        if not os.path.exists(encoded_file_path):
            raise HTTPException(status_code=404, detail="Encoded file not found")

        # Read the encoded content from the hardcoded file path
        with open(encoded_file_path, 'r') as encoded_file:
            encoded_content = encoded_file.read()

        # Decode the base64 content
        decoded_content = base64.b64decode(encoded_content)

        # Hardcoded decoded file path
        decoded_file_path = os.path.join(DECODED_FILE_PATH, HARDCODED_FILE_NAME)
        
        # Save the decoded content to a file
        with open(decoded_file_path, 'wb') as decoded_file:
            decoded_file.write(decoded_content)

        # Verify if the file was successfully saved
        if not os.path.exists(decoded_file_path):
            raise HTTPException(status_code=500, detail="Decoded file could not be saved")

        # Serve the decoded file for download
        return FileResponse(decoded_file_path, media_type=HARDCODED_MIME_TYPE, filename=HARDCODED_FILE_NAME)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")




from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import FileResponse
import base64
import os
import mimetypes

app = FastAPI()

# Path where encoded files will be stored (for simplicity)
ENCODED_FILE_PATH = "encoded_files"
DECODED_FILE_PATH = "decoded_files"

# Create directories if they don't exist
os.makedirs(ENCODED_FILE_PATH, exist_ok=True)
os.makedirs(DECODED_FILE_PATH, exist_ok=True)

@app.post("/upload-file/")
async def upload_file(file: UploadFile = File(...)):
    """Upload a file, encode it to base64, and save it."""
    file_content = await file.read()
    
    # Detect MIME type
    mime_type, _ = mimetypes.guess_type(file.filename)
    if mime_type is None:
        mime_type = 'application/octet-stream'
    
    # Encode the file content to base64
    encoded_content = base64.b64encode(file_content).decode('utf-8')
    
    # Save the encoded file to disk (you can modify this to save in DB or elsewhere)
    encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{file.filename}.txt")
    with open(encoded_file_path, 'w') as encoded_file:
        encoded_file.write(encoded_content)
    
    return {"message": "File uploaded and encoded successfully.", "file_path": encoded_file_path, "mime_type": mime_type}

@app.get("/download-file/")
async def download_file(file_name: str):
    """Decode base64 and return the decoded file as a download."""
    # Path to the encoded file
    encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{file_name}.txt")
    
    # Check if file exists
    if not os.path.exists(encoded_file_path):
        raise HTTPException(status_code=404, detail="File not found")
    
    # Read the encoded content from file
    with open(encoded_file_path, 'r') as encoded_file:
        encoded_content = encoded_file.read()
    
    # Decode the base64 content to binary
    decoded_content = base64.b64decode(encoded_content)
    
    # Determine the MIME type for download (modify this according to your file type)
    mime_type, _ = mimetypes.guess_type(file_name)
    if mime_type is None:
        mime_type = 'application/octet-stream'
    
    # Save the decoded content to a file (this is just for demonstration, you can avoid saving to disk)
    decoded_file_path = os.path.join(DECODED_FILE_PATH, file_name)
    with open(decoded_file_path, 'wb') as decoded_file:
        decoded_file.write(decoded_content)
    
    # Return the file as a download
    return FileResponse(decoded_file_path, media_type=mime_type, filename=file_name)



import React from 'react';

function FileDownloadComponent() {
  const handleDownload = async () => {
    // Make the GET request to download the decoded file
    const fileName = "example.pdf";  // Example file name, change this to your file
    const response = await fetch(`/download-file?file_name=${fileName}`);

    if (!response.ok) {
      console.error("Failed to download the file.");
      return;
    }

    // Convert the response into a Blob
    const blob = await response.blob();

    // Create a link element, set the URL to the blob, and trigger a download
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = fileName;  // Set the file name for download
    link.click();  // Trigger the download
  };

  return (
    <div>
      <button onClick={handleDownload}>Download File</button>
    </div>
  );
}

export default FileDownloadComponent;
