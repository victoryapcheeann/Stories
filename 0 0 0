@app.get("/download-file/")
async def download_file():
    """Decode the hardcoded base64 file and return the decoded file for download."""
    try:
        # Hardcoded encoded file path
        encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{HARDCODED_FILE_NAME}.txt")
        
        # Check if the hardcoded encoded file exists
        if not os.path.exists(encoded_file_path):
            raise HTTPException(status_code=404, detail="Encoded file not found")

        # Read the encoded content from the hardcoded file path
        with open(encoded_file_path, 'r') as encoded_file:
            encoded_content = encoded_file.read()

        # Decode the base64 content
        decoded_content = base64.b64decode(encoded_content)

        # Hardcoded decoded file path
        decoded_file_path = os.path.join(DECODED_FILE_PATH, HARDCODED_FILE_NAME)
        
        # Save the decoded content to a file
        with open(decoded_file_path, 'wb') as decoded_file:
            decoded_file.write(decoded_content)

        # Verify if the file was successfully saved
        if not os.path.exists(decoded_file_path):
            raise HTTPException(status_code=500, detail="Decoded file could not be saved")

        # Serve the decoded file for download
        return FileResponse(decoded_file_path, media_type=HARDCODED_MIME_TYPE, filename=HARDCODED_FILE_NAME)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")




from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import FileResponse
import base64
import os
import mimetypes

app = FastAPI()

# Path where encoded files will be stored (for simplicity)
ENCODED_FILE_PATH = "encoded_files"
DECODED_FILE_PATH = "decoded_files"

# Create directories if they don't exist
os.makedirs(ENCODED_FILE_PATH, exist_ok=True)
os.makedirs(DECODED_FILE_PATH, exist_ok=True)

@app.post("/upload-file/")
async def upload_file(file: UploadFile = File(...)):
    """Upload a file, encode it to base64, and save it."""
    file_content = await file.read()
    
    # Detect MIME type
    mime_type, _ = mimetypes.guess_type(file.filename)
    if mime_type is None:
        mime_type = 'application/octet-stream'
    
    # Encode the file content to base64
    encoded_content = base64.b64encode(file_content).decode('utf-8')
    
    # Save the encoded file to disk (you can modify this to save in DB or elsewhere)
    encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{file.filename}.txt")
    with open(encoded_file_path, 'w') as encoded_file:
        encoded_file.write(encoded_content)
    
    return {"message": "File uploaded and encoded successfully.", "file_path": encoded_file_path, "mime_type": mime_type}

@app.get("/download-file/")
async def download_file(file_name: str):
    """Decode base64 and return the decoded file as a download."""
    # Path to the encoded file
    encoded_file_path = os.path.join(ENCODED_FILE_PATH, f"{file_name}.txt")
    
    # Check if file exists
    if not os.path.exists(encoded_file_path):
        raise HTTPException(status_code=404, detail="File not found")
    
    # Read the encoded content from file
    with open(encoded_file_path, 'r') as encoded_file:
        encoded_content = encoded_file.read()
    
    # Decode the base64 content to binary
    decoded_content = base64.b64decode(encoded_content)
    
    # Determine the MIME type for download (modify this according to your file type)
    mime_type, _ = mimetypes.guess_type(file_name)
    if mime_type is None:
        mime_type = 'application/octet-stream'
    
    # Save the decoded content to a file (this is just for demonstration, you can avoid saving to disk)
    decoded_file_path = os.path.join(DECODED_FILE_PATH, file_name)
    with open(decoded_file_path, 'wb') as decoded_file:
        decoded_file.write(decoded_content)
    
    # Return the file as a download
    return FileResponse(decoded_file_path, media_type=mime_type, filename=file_name)



import React from 'react';

function FileDownloadComponent() {
  const handleDownload = async () => {
    // Make the GET request to download the decoded file
    const fileName = "example.pdf";  // Example file name, change this to your file
    const response = await fetch(`/download-file?file_name=${fileName}`);

    if (!response.ok) {
      console.error("Failed to download the file.");
      return;
    }

    // Convert the response into a Blob
    const blob = await response.blob();

    // Create a link element, set the URL to the blob, and trigger a download
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = fileName;  // Set the file name for download
    link.click();  // Trigger the download
  };

  return (
    <div>
      <button onClick={handleDownload}>Download File</button>
    </div>
  );
}

export default FileDownloadComponent;
