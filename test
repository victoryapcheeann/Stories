   // Function to shuffle selected rows to the top
  const shuffleSelectedRowsToTop = () => {
    if (gridRef.current) {
      // Get the selected rows (IDs)
      const selectedNodes = gridRef.current.api.getSelectedNodes();
      const selectedIds = selectedNodes.map(node => node.data.id);

      // Filter selected and unselected rows
      const selectedData = selectedNodes.map(node => node.data);
      const unselectedData = rowData.filter(row => !selectedIds.includes(row.id));

      // Update rowData to move selected rows to the top
      setRowData([...selectedData, ...unselectedData]);

      // Reapply the selection after reordering
      setTimeout(() => {
        gridRef.current?.api.forEachNode(node => {
          if (selectedIds.includes(node.data.id)) {
            node.setSelected(true);
          }
        });
      }, 0);
    }
  };

import React, { useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

interface RowData {
  id: number;
  name: string;
  age: number;
}

interface ColumnDef {
  field?: string;
  headerName?: string;
  sortable?: boolean;
  filter?: boolean;
  checkboxSelection?: boolean;
  headerCheckboxSelection?: boolean;
  width?: number;
  pinned?: string;
}

const App: React.FC = () => {
  const [rowData] = useState<RowData[]>([
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Smith', age: 30 },
    { id: 3, name: 'Sam Johnson', age: 40 }
  ]);

  const [columnDefs] = useState<ColumnDef[]>([
    { headerCheckboxSelection: true, checkboxSelection: true, width: 50, pinned: 'left' },
    { field: 'name', headerName: 'Name', sortable: true, filter: true },
    { field: 'age', headerName: 'Age', sortable: true, filter: true }
  ]);

  return (
    <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
      <AgGridReact
        rowData={rowData}
        columnDefs={columnDefs}
        rowSelection="multiple"
      />
    </div>
  );
};

export default App;
