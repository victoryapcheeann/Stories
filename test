  // Function to move selected rows to the top
  const onSelectionChanged = () => {
    const selectedNodes = gridRef.current!.api.getSelectedNodes();
    const selectedIds = selectedNodes.map(node => node.data.id);

    const selectedData = selectedNodes.map(node => node.data);
    const unselectedData = rowData.filter(row => !selectedIds.includes(row.id));

    // Move selected rows to the top
    const newRowData = [...selectedData, ...unselectedData];

    // Update row data and preserve the selection
    setRowData(newRowData);

    // After updating the row data, wait for the grid to finish rendering and then re-select the rows
    setTimeout(() => {
      newRowData.forEach(row => {
        if (selectedIds.includes(row.id)) {
          const node = gridRef.current!.api.getRowNode(row.id.toString());
          if (node) {
            node.setSelected(true); // Re-select the rows
          }
        }
      });
    }, 0);
  };

        getRowNodeId={data => data.id.toString()} // Provide a unique row ID for selection
        onSelectionChanged={onSelectionChanged}


import React, { useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

interface RowData {
  id: number;
  name: string;
  age: number;
}

interface ColumnDef {
  field?: string;
  headerName?: string;
  sortable?: boolean;
  filter?: boolean;
  checkboxSelection?: boolean;
  headerCheckboxSelection?: boolean;
  width?: number;
  pinned?: string;
}

const App: React.FC = () => {
  const [rowData] = useState<RowData[]>([
    { id: 1, name: 'John Doe', age: 25 },
    { id: 2, name: 'Jane Smith', age: 30 },
    { id: 3, name: 'Sam Johnson', age: 40 }
  ]);

  const [columnDefs] = useState<ColumnDef[]>([
    { headerCheckboxSelection: true, checkboxSelection: true, width: 50, pinned: 'left' },
    { field: 'name', headerName: 'Name', sortable: true, filter: true },
    { field: 'age', headerName: 'Age', sortable: true, filter: true }
  ]);

  return (
    <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
      <AgGridReact
        rowData={rowData}
        columnDefs={columnDefs}
        rowSelection="multiple"
      />
    </div>
  );
};

export default App;
