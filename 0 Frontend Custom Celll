import React, { useState, useEffect } from 'react';
import { Combobox, InputBase, useCombobox } from '@mantine/core';

interface SelectCreatableProps {
  dataList: string[];
  value: string;
  onValueChange: (value: string) => void;
}

export function SelectCreatable({ dataList, value, onValueChange }: SelectCreatableProps) {
  const combobox = useCombobox({
    onDropdownClose: () => combobox.resetSelectedOption(),
  });

  const [data, setData] = useState<string[]>(dataList);
  const [search, setSearch] = useState<string>(value);

  useEffect(() => {
    setData(dataList);
  }, [dataList]);

  useEffect(() => {
    setSearch(value);
  }, [value]);

  const exactOptionMatch = data.includes(search);
  const filteredOptions = exactOptionMatch
    ? data
    : data.filter((item) =>
        item.toLowerCase().includes(search.toLowerCase().trim())
      );

  const options = filteredOptions.map((item) => (
    <Combobox.Option value={item} key={item}>
      {item}
    </Combobox.Option>
  ));

  const handleOptionSubmit = (val: string) => {
    if (val === '$create') {
      const newData = [...data, search];
      setData(newData);
      onValueChange(search);
    } else {
      onValueChange(val);
    }
    combobox.closeDropdown();
  };

  return (
    <Combobox
      store={combobox}
      withinPortal={false}
      onOptionSubmit={handleOptionSubmit}
    >
      <Combobox.Target>
        <InputBase
          rightSection={<Combobox.Chevron />}
          value={search}
          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
            const inputValue = event.currentTarget.value;
            setSearch(inputValue);
            combobox.openDropdown();
            combobox.updateSelectedOptionIndex();
          }}
          onClick={() => combobox.openDropdown()}
          onFocus={() => combobox.openDropdown()}
          onBlur={() => {
            combobox.closeDropdown();
            setSearch(value);
          }}
          placeholder="Search value"
          rightSectionPointerEvents="none"
        />
      </Combobox.Target>

      <Combobox.Dropdown>
        <Combobox.Options>
          {options}
          {!exactOptionMatch && search.trim().length > 0 && (
            <Combobox.Option value="$create">
              + Create {search}
            </Combobox.Option>
          )}
        </Combobox.Options>
      </Combobox.Dropdown>
    </Combobox>
  );
}
