import React, { useState, useEffect } from 'react';
import { Combobox, InputBase, useCombobox } from '@mantine/core';

interface SelectCreatableProps {
  dataList: string[];
  value: string[];
  onValueChange: (value: string[]) => void;
}

export function SelectCreatable({
  dataList,
  value,
  onValueChange,
}: SelectCreatableProps) {
  const combobox = useCombobox({
    onDropdownClose: () => combobox.resetSelectedOption(),
  });

  const [data, setData] = useState<string[]>(dataList);
  const [search, setSearch] = useState<string>('');

  useEffect(() => {
    setData(dataList);
  }, [dataList]);

  const filteredOptions = data.filter((item) =>
    item.toLowerCase().includes(search.toLowerCase().trim())
  );

  const options = filteredOptions.map((item) => (
    <Combobox.Option value={item} key={item}>
      <div style={{ display: 'flex', alignItems: 'center' }}>
        <input
          type="checkbox"
          checked={value.includes(item)}
          readOnly
          style={{ marginRight: 8 }}
        />
        {item}
      </div>
    </Combobox.Option>
  ));

  const handleOptionSubmit = (selectedItem: string) => {
    if (selectedItem === '$create') {
      if (!data.includes(search)) {
        const newData = [...data, search];
        setData(newData);
      }
      if (!value.includes(search)) {
        const newValue = [...value, search];
        onValueChange(newValue);
      }
    } else {
      let newValue: string[];
      if (value.includes(selectedItem)) {
        newValue = value.filter((item) => item !== selectedItem);
      } else {
        newValue = [...value, selectedItem];
      }
      onValueChange(newValue);
    }
    setSearch('');
    combobox.updateSelectedOptionIndex();
  };

  return (
    <Combobox
      store={combobox}
      withinPortal={false}
      onOptionSubmit={handleOptionSubmit}
    >
      <Combobox.Target>
        <InputBase
          rightSection={<Combobox.Chevron />}
          value={search}
          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
            const inputValue = event.currentTarget.value;
            setSearch(inputValue);
            combobox.openDropdown();
            combobox.updateSelectedOptionIndex();
          }}
          onClick={() => combobox.openDropdown()}
          onFocus={() => combobox.openDropdown()}
          onBlur={() => {
            combobox.closeDropdown();
            setSearch('');
          }}
          placeholder="Select values"
          rightSectionPointerEvents="none"
        />
      </Combobox.Target>

      <Combobox.Dropdown>
        <Combobox.Options>
          {options}
          {search.trim().length > 0 && !data.includes(search) && (
            <Combobox.Option value="$create">
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <input
                  type="checkbox"
                  checked={value.includes(search)}
                  readOnly
                  style={{ marginRight: 8 }}
                />
                + Create {search}
              </div>
            </Combobox.Option>
          )}
        </Combobox.Options>
      </Combobox.Dropdown>
    </Combobox>
  );
}
