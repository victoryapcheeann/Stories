import { useState } from 'react';
import { Combobox, InputBase, useCombobox } from '@mantine/core';

export function SelectCreatable({
  dataList,             // List of options to select from
  value,                // Array of selected values (multi-select)
  onValueChange,        // Callback to handle value changes
}: {
  dataList: string[];   // Application Name List passed as prop
  value: string[];      // Multi-select value (list of selected items)
  onValueChange: (val: string[]) => void;  // Multi-select handler (updates list of selected items)
}) {
  const combobox = useCombobox({
    onDropdownClose: () => combobox.resetSelectedOption(),
  });

  const [data, setData] = useState(dataList);  // List of options (modifiable)
  const [search, setSearch] = useState('');    // Search term for filtering options

  // Filter options based on the search query
  const exactOptionMatch = data.some((item) => item === search);
  const filteredOptions = exactOptionMatch
    ? data
    : data.filter((item) =>
        item.toLowerCase().includes(search.toLowerCase().trim())  // Filter the list based on search
      );

  const options = filteredOptions.map((item) => (
    <Combobox.Option value={item} key={item}>
      {item}
    </Combobox.Option>
  ));

  // Handle the submission of a selected option
  const handleOptionSubmit = (val: string) => {
    if (val === '$create') {
      // Add a new item to the data list and update selected values
      const newData = [...data, search];
      setData(newData);  // Update the available data options
      onValueChange([...value, search]);  // Add the new option to the selected values
    } else if (!value.includes(val)) {
      // Add the selected option to the selected values
      onValueChange([...value, val]);
    }

    setSearch('');  // Clear the search field after selection
    combobox.closeDropdown();  // Close the dropdown
  };

  return (
    <Combobox
      store={combobox}
      withinPortal={false}
      onOptionSubmit={handleOptionSubmit}
    >
      <Combobox.Target>
        <InputBase
          rightSection={<Combobox.Chevron />}
          value={search}
          onChange={(event) => {
            combobox.openDropdown();
            combobox.updateSelectedOptionIndex();
            setSearch(event.currentTarget.value);  // Update search state with user input
          }}
          onClick={() => combobox.openDropdown()}
          onFocus={() => combobox.openDropdown()}
          onBlur={() => combobox.closeDropdown()}
          placeholder="Search or create"
          rightSectionPointerEvents="none"
        />
      </Combobox.Target>

      <Combobox.Dropdown>
        <Combobox.Options>
          {options}
          {!exactOptionMatch && search.trim().length > 0 && (
            <Combobox.Option value="$create">+ Create {search}</Combobox.Option>
          )}
        </Combobox.Options>
      </Combobox.Dropdown>
    </Combobox>
  );
}
