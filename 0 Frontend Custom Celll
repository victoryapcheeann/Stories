import { useState } from 'react';
import { Combobox, InputBase, useCombobox } from '@mantine/core';

interface SelectCreatableProps {
  dataset: string[];
  currentValue: string[];
  handleChange: (value: string[]) => void;
}

export function SelectCreatable({ dataset, currentValue, handleChange }: SelectCreatableProps) {
  const combobox = useCombobox({
    onDropdownClose: () => combobox.resetSelectedOption(),
  });

  const [search, setSearch] = useState('');

  const exactOptionMatch = dataset.some((item) => item === search);
  const filteredOptions = exactOptionMatch
    ? dataset
    : dataset.filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()));

  const options = filteredOptions.map((item) => (
    <Combobox.Option value={item} key={item}>
      {item}
    </Combobox.Option>
  ));

  const handleOptionSubmit = (val: string) => {
    if (val === '$create') {
      // Add the new value to the current value array
      handleChange([...currentValue, search]);
    } else if (!currentValue.includes(val)) {
      // Add the selected value to the current value array if not already present
      handleChange([...currentValue, val]);
    }
    setSearch(''); // Clear the search input after selection
    combobox.closeDropdown();
  };

  return (
    <Combobox
      store={combobox}
      withinPortal={false}
      onOptionSubmit={handleOptionSubmit}
    >
      <Combobox.Target>
        <InputBase
          rightSection={<Combobox.Chevron />}
          value={search}
          onChange={(event) => {
            combobox.openDropdown();
            combobox.updateSelectedOptionIndex();
            setSearch(event.currentTarget.value);
          }}
          onClick={() => combobox.openDropdown()}
          onFocus={() => combobox.openDropdown()}
          onBlur={() => combobox.closeDropdown()}
          placeholder="Search value"
          rightSectionPointerEvents="none"
        />
      </Combobox.Target>

      <Combobox.Dropdown>
        <Combobox.Options>
          {options}
          {!exactOptionMatch && search.trim().length > 0 && (
            <Combobox.Option value="$create">+ Create {search}</Combobox.Option>
          )}
        </Combobox.Options>
      </Combobox.Dropdown>

      <div>
        {currentValue.length > 0 && (
          <div>
            <strong>Selected Items:</strong>
            <ul>
              {currentValue.map((item) => (
                <li key={item}>
                  {item} <button onClick={() => handleChange(currentValue.filter((i) => i !== item))}>Remove</button>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </Combobox>
  );
}
