import { useState, useEffect } from 'react';
import { CheckIcon, Combobox, Group, useCombobox } from '@mantine/core';

export function SelectCreatable({ dataList, value, onValueChange }) {
  const combobox = useCombobox({
    onDropdownClose: () => combobox.resetSelectedOption(),
    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),
  });

  const [search, setSearch] = useState('');
  const [optionsData, setOptionsData] = useState(dataList || []);

  // Update optionsData when dataList prop changes
  useEffect(() => {
    setOptionsData(dataList || []);
  }, [dataList]);

  const exactOptionMatch = optionsData.some((item) => item === search);

  const handleValueSelect = (val) => {
    setSearch('');

    if (val === '$create') {
      setOptionsData((current) => [...current, search]);
      onValueChange(search);
    } else {
      onValueChange(val);
    }
  };

  const filteredOptions = optionsData
    .filter((item) => item.toLowerCase().includes(search.trim().toLowerCase()))
    .map((item) => (
      <Combobox.Option value={item} key={item} active={value === item}>
        <Group gap="sm">
          {value === item ? <CheckIcon size={12} /> : null}
          <span>{item}</span>
        </Group>
      </Combobox.Option>
    ));

  return (
    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>
      <Combobox.DropdownTarget>
        <Combobox.EventsTarget>
          <Combobox.Input
            onFocus={() => combobox.openDropdown()}
            onBlur={() => combobox.closeDropdown()}
            value={search || value || ''}
            placeholder="Select or create an option"
            onChange={(event) => {
              combobox.updateSelectedOptionIndex();
              setSearch(event.currentTarget.value);
            }}
          />
        </Combobox.EventsTarget>
      </Combobox.DropdownTarget>

      <Combobox.Dropdown>
        <Combobox.Options>
          {filteredOptions}

          {!exactOptionMatch && search.trim().length > 0 && (
            <Combobox.Option value="$create">+ Create "{search}"</Combobox.Option>
          )}

          {exactOptionMatch && search.trim().length > 0 && filteredOptions.length === 0 && (
            <Combobox.Empty>Nothing found</Combobox.Empty>
          )}
        </Combobox.Options>
      </Combobox.Dropdown>
    </Combobox>
  );
}


import React, { memo, useState } from 'react';
import { useDropdownContext } from '../../context/DropdownValueContext';
import { SelectCreatable } from './SelectCreatable';

export default memo(({ value, onValueChange, stopEditing }) => {
  const [currentValue, setCurrentValue] = useState(value || '');
  const { applicationNameList, setApplicationNameList, setCurrentApplicationName } = useDropdownContext();

  const handleChange = (newValue) => {
    setCurrentApplicationName(newValue);
    setCurrentValue(newValue);
    onValueChange(newValue);
  };

  const handleCreateOption = (newOption) => {
    setApplicationNameList((prevList) => [...prevList, newOption]);
  };

  return (
    <SelectCreatable
      dataList={applicationNameList}
      value={currentValue}
      onValueChange={handleChange}
      onCreateOption={handleCreateOption}
    />
  );
});
