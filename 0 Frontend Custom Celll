import React, { useState } from 'react';
import { Combobox, InputBase, useCombobox } from '@mantine/core';

interface SelectCreatableProps {
  value: string;
  onValueChange: (value: string) => void;
}

export function SelectCreatable({ value, onValueChange }: SelectCreatableProps) {
  const combobox = useCombobox({
    onDropdownClose: () => combobox.resetSelectedOption(),
  });

  const groceries = [
    'üçé Apples',
    'üçå Bananas',
    'ü•¶ Broccoli',
    'ü•ï Carrots',
    'üç´ Chocolate',
    'üçá Grapes',
  ];

  const [data, setData] = useState<string[]>(groceries);
  const [search, setSearch] = useState<string>(value || '');

  const exactOptionMatch = data.some((item) => item === search);
  const filteredOptions = exactOptionMatch
    ? data
    : data.filter((item) =>
        item.toLowerCase().includes(search.toLowerCase().trim())
      );

  const options = filteredOptions.map((item) => (
    <Combobox.Option value={item} key={item}>
      {item}
    </Combobox.Option>
  ));

  const handleOptionSubmit = (val: string) => {
    if (val === '$create') {
      setData((current) => [...current, search]);
      onValueChange(search);
      setSearch(search);
    } else {
      onValueChange(val);
      setSearch(val);
    }
    combobox.closeDropdown();
  };

  return (
    <Combobox
      store={combobox}
      withinPortal={false}
      onOptionSubmit={handleOptionSubmit}
    >
      <Combobox.Target>
        <InputBase
          rightSection={<Combobox.Chevron />}
          value={search}
          onChange={(event) => {
            combobox.openDropdown();
            combobox.updateSelectedOptionIndex();
            setSearch(event.currentTarget.value);
          }}
          onClick={() => combobox.openDropdown()}
          onFocus={() => combobox.openDropdown()}
          onBlur={() => {
            combobox.closeDropdown();
            setSearch(value || '');
          }}
          placeholder="Search value"
          rightSectionPointerEvents="none"
        />
      </Combobox.Target>

      <Combobox.Dropdown>
        <Combobox.Options>
          {options}
          {!exactOptionMatch && search.trim().length > 0 && (
            <Combobox.Option value="$create">
              + Create {search}
            </Combobox.Option>
          )}
        </Combobox.Options>
      </Combobox.Dropdown>
    </Combobox>
  );
}


import React, { useState } from 'react';
import { ICellRendererParams } from 'ag-grid-community';
import { SelectCreatable } from './SelectCreatable';
import { Modal } from '@mantine/core';

const CustomCellRenderer: React.FC<ICellRendererParams> = (props) => {
  const [modalOpened, setModalOpened] = useState(false);
  const [cellValue, setCellValue] = useState<string>(props.value);

  const handleButtonClick = () => {
    setModalOpened(true);
  };

  const handleValueChange = (newValue: string) => {
    setCellValue(newValue);
    setModalOpened(false);

    // Update the value in the grid's data model
    props.node.setDataValue(props.column.getColId(), newValue);
  };

  return (
    <div>
      <button onClick={handleButtonClick}>Edit Value</button>
      <Modal opened={modalOpened} onClose={() => setModalOpened(false)}>
        <SelectCreatable value={cellValue} onValueChange={handleValueChange} />
      </Modal>
    </div>
  );
};

export default CustomCellRenderer;


const columnDefs = [
  {
    headerName: 'Item',
    field: 'item',
    cellRenderer: 'customCellRenderer',
  },
  // ... other columns
];
