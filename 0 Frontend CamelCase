type AnyObject = { [key: string]: any };

function snakeToCamel(snakeStr: string): string {
  return snakeStr.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
}

function convertKeysToCamelCase(obj: AnyObject): AnyObject {
  const stack: { value: AnyObject }[] = [{ value: obj }];

  while (stack.length) {
    const { value } = stack.pop()!;

    if (Array.isArray(value)) {
      value.forEach(item => {
        if (item && typeof item === 'object') stack.push({ value: item });
      });
    } else if (value && typeof value === 'object') {
      Object.entries(value).forEach(([key, val]) => {
        const camelKey = snakeToCamel(key);

        if (camelKey !== key) {
          value[camelKey] = val;
          delete value[key];
        }

        if (val && typeof val === 'object') {
          stack.push({ value: val });
        }
      });
    }
  }

  return obj;
}

// Example usage
const nestedObj = {
  first_key: {
    second_key: {
      third_key_list: [
        { inner_key_one: 1, inner_key_two: 2 },
        { inner_key_three: 3, inner_key_four: 4 }
      ]
    }
  }
};

const convertedObj = convertKeysToCamelCase(nestedObj);
console.log(convertedObj);
