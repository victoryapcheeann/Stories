cellClassRules: {
        'updated-cell': (params: CellClassParams) => !!params.data?.updated,
      }, // Apply updated-cell class if the cell was edited
 
 // Function to handle cell value changes
  const onCellValueChanged = (params: any) => {
    const rowNode = params.node;
    // Set a custom "updated" flag when the cell is updated
    rowNode.setDataValue('updated', true);

    // Optionally refresh cells to force re-rendering and apply the new styles
    params.api.refreshCells({ force: true });
  };





import React from 'react';
import { AgGridReact } from 'ag-grid-react';
import { GridApi, FilterModel } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const GridComponent: React.FC = () => {
  const [gridApi, setGridApi] = React.useState<GridApi | null>(null);

  // Column definitions, including 'id'
  const columnDefs = [
    { headerName: 'ID', field: 'id', filter: 'agSetColumnFilter' },
    { headerName: 'Name', field: 'name' },
    { headerName: 'Age', field: 'age' },
  ];

  // Sample row data
  const rowData = [
    { id: 1, name: 'John Doe', age: 30 },
    { id: 2, name: 'Jane Smith', age: 25 },
    { id: 3, name: 'Jack Johnson', age: 40 },
  ];

  // Function to handle grid ready event
  const onGridReady = (params: any) => {
    setGridApi(params.api);
  };

  // Function to filter selected rows by ID using filter model
  const filterSelectedRows = () => {
    if (!gridApi) return;

    // Get the selected rows
    const selectedRows = gridApi.getSelectedRows();

    // Extract the IDs from the selected rows
    const selectedIds = selectedRows.map((row) => row.id);

    // Create a filter model to show only rows with the selected IDs
    const filterModel: FilterModel = {
      id: {
        filterType: 'set',
        values: selectedIds.map(String), // Ensure the IDs are strings for the filter
      },
    };

    // Apply the filter model to the grid
    gridApi.setFilterModel(filterModel);
  };

  // Function to reset the filter and show all rows again
  const resetFilter = () => {
    if (!gridApi) return;

    // Reset the filter model to null to show all rows
    gridApi.setFilterModel(null);
  };

  return (
    <div>
      <div className="button-group">
        <button onClick={filterSelectedRows}>Filter Selected Rows</button>
        <button onClick={resetFilter}>Show All Rows</button>
      </div>

      <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
        <AgGridReact
          columnDefs={columnDefs}
          rowData={rowData}
          rowSelection="multiple"
          onGridReady={onGridReady}
        />
      </div>
    </div>
  );
};

export default GridComponent;
