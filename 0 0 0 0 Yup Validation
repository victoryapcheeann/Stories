const re = /^((ftp|http|https):\/\/)?(www.)?(?!.*(ftp|http|https|www.))[a-zA-Z0-9_-]+(\.[a-zA-Z]+)+((\/)[\w#]+)*(\/\w+\?[a-zA-Z0-9_]+=\w+(&[a-zA-Z0-9_]+=\w+)*)?$/gm

Yup.string().matches(re,'URL is not valid')





import * as Yup from 'yup';

// Sample object
const product = {
  id: { 
    value: 1, 
    rational: "Unique identifier for the product", 
    urlLink: "https://example.com/products/1" 
  },
  name: { 
    value: "Laptop", 
    rational: "Name of the product", 
    urlLink: "https://example.com/products/laptop" 
  },
  price: { 
    value: 1200, 
    rational: "Price of the product in USD", 
    urlLink: "https://example.com/products/laptop/price" 
  }
};

// Dynamic schema generator
const generateYupSchema = (obj) => {
  const shape = {};

  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      shape[key] = Yup.object().shape({
        value: Yup.mixed().required(`${key}.value is required`),       // Dynamic required field
        rational: Yup.string().required(`${key}.rational is required`), // Rational should always be a string
        urlLink: Yup.string().url(`${key}.urlLink must be a valid URL`).required(`${key}.urlLink is required`),
      });
    }
  }

  return Yup.object().shape(shape);
};

// Generate schema dynamically
const productSchema = generateYupSchema(product);

// Example validation
const invalidProduct = {
  id: { value: '', rational: '', urlLink: 'invalid-url' },
  name: { value: 'Laptop', rational: '', urlLink: 'https://example.com/products/laptop' },
  price: { value: '', rational: 'Price in USD', urlLink: '' }
};

productSchema.validate(invalidProduct, { abortEarly: false })
  .then(() => {
    console.log("Validation passed!");
  })
  .catch((err) => {
    console.log("Validation errors:", err.errors);
  });





import { useForm } from '@mantine/form';
import * as yup from 'yup';
import { useState, useEffect } from 'react';

export default function DynamicValidationForm() {
  const [validationSchema, setValidationSchema] = useState(() =>
    yup.object({
      email: yup.string().email('Invalid email').required('Required'),
      age: yup.number().min(18, 'Must be at least 18'),
    })
  );

  const form = useForm({
    initialValues: {
      email: '',
      age: '',
    },
    validate: validationSchema.validateSync,
  });

  useEffect(() => {
    // Simulate API call to fetch new validation rules
    setTimeout(() => {
      setValidationSchema(
        yup.object({
          email: yup.string().email('Invalid email').required('Email is required'),
          age: yup.number().min(21, 'Now minimum age is 21'), // Updated rule from API
        })
      );
    }, 2000);
  }, []);

  return (
    <form onSubmit={form.onSubmit((values) => console.log(values))}>
      <input {...form.getInputProps('email')} placeholder="Email" />
      <input type="number" {...form.getInputProps('age')} placeholder="Age" />
      <button type="submit">Submit</button>
    </form>
  );
}

email: yup.string().required('Email is required')
