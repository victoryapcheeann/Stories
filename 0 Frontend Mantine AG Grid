import React, { useState, forwardRef, useImperativeHandle } from 'react';
import { Autocomplete } from '@mantine/core';

// Custom Cell Editor using Mantine Autocomplete
const MantineAutocompleteEditor = forwardRef((props, ref) => {
  const [value, setValue] = useState(props.value || ''); // Initialize with the initial cell value
  const options = props.options || []; // Dropdown options

  // Use Imperative Handle to expose methods to AG Grid
  useImperativeHandle(ref, () => ({
    getValue() {
      return value; // Return the value to AG Grid after editing
    },
    isPopup() {
      return true; // Make this a popup editor so it doesn't constrain to the cell size
    },
    afterGuiAttached() {
      // Focus on the input field when the component is attached to the DOM
      const input = document.querySelector('input');
      if (input) input.focus();
    },
  }));

  // Handle value change from the Autocomplete component
  const handleChange = (newValue: string) => {
    setValue(newValue); // Update the state when the value changes
  };

  // Stop editing when the Enter key is pressed
  const handleKeyDown = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter') {
      props.api.stopEditing(); // Stop editing and submit the value
    }
  };

  return (
    <Autocomplete
      value={value}
      onChange={handleChange} // Update the value on change
      data={options} // Provide options for the dropdown
      placeholder="Type or select"
      nothingFound="No options"
      styles={{ input: { width: '100%' } }}
      onKeyDown={handleKeyDown} // Handle key press events
    />
  );
});

export default MantineAutocompleteEditor;
