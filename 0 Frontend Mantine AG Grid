import { ICellEditorParams, ICellEditorComp } from '@ag-grid-community/core';
import { Autocomplete } from '@mantine/core';
import React from 'react';
import ReactDOM from 'react-dom';

export class MantineAutocompleteEditor implements ICellEditorComp {
  private container: HTMLDivElement;
  private value: string = '';
  private options: string[] = [];

  constructor() {
    this.container = document.createElement('div');
    this.container.style = 'padding: 8px; border: 1px solid #ccc; border-radius: 4px;';
  }

  init(params: ICellEditorParams) {
    this.value = params.value || ''; // Initialize with the current value
    this.options = params.options || []; // Dropdown options

    // Use React to render the Mantine Autocomplete component
    ReactDOM.render(
      <Autocomplete
        value={this.value}
        data={this.options}
        onChange={(newValue: string) => this.value = newValue}
        placeholder="Type or select"
        nothingFound="No options"
      />,
      this.container
    );

    // Stop editing when user presses Enter
    this.container.addEventListener('keydown', (event: KeyboardEvent) => {
      if (event.key === 'Enter') {
        params.stopEditing();
      }
    });
  }

  getGui() {
    return this.container; // Return the container with the rendered Autocomplete component
  }

  afterGuiAttached() {
    const inputElement = this.container.querySelector('input');
    if (inputElement) inputElement.focus(); // Focus the input after attaching to DOM
  }

  getValue() {
    return this.value; // Return the selected value when editing is complete
  }

  destroy() {
    ReactDOM.unmountComponentAtNode(this.container); // Clean up when editor is destroyed
  }

  isPopup() {
    return true; // Make the editor behave like a popup
  }
}
