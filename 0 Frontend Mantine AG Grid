import { ICellEditorComp, ICellEditorParams } from '@ag-grid-community/core';
import React from 'react';
import { Autocomplete } from '@mantine/core';
import ReactDOM from 'react-dom/client';

export class MantineAutocompleteEditor implements ICellEditorComp {
  private eInput!: HTMLDivElement; // Container for Mantine Autocomplete
  private params!: ICellEditorParams;
  private value!: string;
  private root!: ReactDOM.Root;  // For unmounting the component

  // Initialization method
  init(params: ICellEditorParams) {
    this.params = params;
    this.value = params.value || '';  // Initialize with the current value

    // Create a div element to hold the Autocomplete component
    this.eInput = document.createElement('div');
    this.eInput.classList.add('mantine-autocomplete-editor');

    // Render Mantine Autocomplete inside the container using ReactDOM.createRoot
    this.root = ReactDOM.createRoot(this.eInput);  // Create root for React component
    this.root.render(
      <Autocomplete
        data={params.options || []}  // Options passed from params
        value={this.value}
        onChange={(val: string) => this.value = val}  // Update value on change
        placeholder="Type or select"
        nothingFound="No options"
        styles={{ input: { width: '100%' } }}  // Full width styling
      />
    );
  }

  // Return the GUI element (the div holding the Autocomplete component)
  getGui(): HTMLElement {
    return this.eInput;
  }

  // Return the final value
  getValue(): any {
    return this.value;
  }

  // Focus on the input when the component is attached to the DOM
  afterGuiAttached() {
    const inputElement = this.eInput.querySelector('input');
    if (inputElement) {
      inputElement.focus();
    }
  }

  // Clean up when the editor is destroyed
  destroy() {
    if (this.root) {
      this.root.unmount();  // Unmount the React component
    }
  }
}
