// Assuming you have the original data stored somewhere for comparison
const originalData = {
  rowId1: { columnA: 'Original Value A', columnB: 'Original Value B' },
  rowId2: { columnA: 'Original Value C', columnB: 'Original Value D' }
};

// Column definitions
const columnDefs = [
  {
    headerName: 'Column A',
    field: 'columnA',
    cellStyle: params => {
      // Compare current value with original value
      const originalValue = originalData[params.data.id]?.columnA;
      if (params.value !== originalValue) {
        // Change cell color if values are different
        return { backgroundColor: 'lightcoral' };
      }
      return null; // Default style
    }
  },
  {
    headerName: 'Column B',
    field: 'columnB',
    cellStyle: params => {
      // Compare current value with original value
      const originalValue = originalData[params.data.id]?.columnB;
      if (params.value !== originalValue) {
        // Change cell color if values are different
        return { backgroundColor: 'lightcoral' };
      }
      return null; // Default style
    }
  }
];

// Grid options
const gridOptions = {
  columnDefs: columnDefs,
  rowData: [
    { id: 'rowId1', columnA: 'Current Value A', columnB: 'Current Value B' },
    { id: 'rowId2', columnA: 'Original Value C', columnB: 'Modified Value D' }
  ]
};

// Initialize the grid
new agGrid.Grid(document.getElementById('myGrid'), gridOptions);


const columnDefs = [
  {
    headerName: 'Column A',
    field: 'columnA',
    cellClassRules: {
      'cell-changed': params => {
        // Compare current value with original value
        const originalValue = originalData[params.data.id]?.columnA;
        return params.value !== originalValue;
      }
    }
  },
  {
    headerName: 'Column B',
    field: 'columnB',
    cellClassRules: {
      'cell-changed': params => {
        const originalValue = originalData[params.data.id]?.columnB;
        return params.value !== originalValue;
      }
    }
  }
];

// Add the CSS rule
const css = `
.cell-changed {
  background-color: lightcoral;
}
`;

// Append to document
const style = document.createElement('style');
style.appendChild(document.createTextNode(css));
document.head.appendChild(style);

// Initialize the grid
new agGrid.Grid(document.getElementById('myGrid'), gridOptions);





// VisibilityContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface VisibilityContextType {
  isVisible: boolean;
  marginTop: number;
  toggleVisibility: () => void;
  adjustMarginTop: (newMargin: number) => void;
}

const VisibilityContext = createContext<VisibilityContextType | undefined>(undefined);

export const VisibilityProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [isVisible, setIsVisible] = useState<boolean>(true);
  const [marginTop, setMarginTop] = useState<number>(0); // Type for marginTop as number

  const toggleVisibility = () => setIsVisible((prev) => !prev);
  const adjustMarginTop = (newMargin: number) => setMarginTop(newMargin);

  return (
    <VisibilityContext.Provider value={{ isVisible, toggleVisibility, marginTop, adjustMarginTop }}>
      {children}
    </VisibilityContext.Provider>
  );
};

export const useVisibility = (): VisibilityContextType => {
  const context = useContext(VisibilityContext);
  if (!context) {
    throw new Error('useVisibility must be used within a VisibilityProvider');
  }
  return context;
};

// App.tsx
import React from 'react';
import { VisibilityProvider } from './VisibilityContext';
import ParentComponent from './ParentComponent';

const App: React.FC = () => {
  return (
    <VisibilityProvider>
      <ParentComponent />
    </VisibilityProvider>
  );
};

export default App;


// ParentComponent.tsx
import React from 'react';
import { useVisibility } from './VisibilityContext';
import ChildComponent from './ChildComponent';

const ParentComponent: React.FC = () => {
  const { isVisible, marginTop } = useVisibility();

  return (
    <div>
      <h1>Parent Component</h1>
      {isVisible && (
        <div style={{ marginTop: `${marginTop}px` }}>
          This component is visible with margin-top: {marginTop}px
        </div>
      )}
      {isVisible && (
        <div style={{ marginTop: `${marginTop}px` }}>
          Another component to hide, margin-top: {marginTop}px
        </div>
      )}
      <ChildComponent />
    </div>
  );
};

export default ParentComponent;

// ChildComponent.tsx
import React, { useState } from 'react';
import { useVisibility } from './VisibilityContext';

const ChildComponent: React.FC = () => {
  const { toggleVisibility, adjustMarginTop } = useVisibility();
  const [marginValue, setMarginValue] = useState<number>(0); // Type marginValue as number

  const handleMarginChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = Number(e.target.value);
    setMarginValue(value);
    adjustMarginTop(value);
  };

  return (
    <div>
      <button onClick={toggleVisibility}>
        Toggle Visibility of Parent Components
      </button>

      <div>
        <label>
          Adjust Margin-Top:
          <input
            type="number"
            value={marginValue}
            onChange={handleMarginChange}
            placeholder="Enter margin-top value"
          />
        </label>
      </div>
    </div>
  );
};

export default ChildComponent;
