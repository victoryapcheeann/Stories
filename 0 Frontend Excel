import * as XLSX from 'xlsx';

interface MyRowData {
  name: string;
  age: number;
  email: string;
}

const REQUIRED_COLUMNS = ['name', 'age', 'email'] as const;

function validateColumns(headerRow: string[]): boolean {
  return REQUIRED_COLUMNS.every(col => headerRow.includes(col));
}

function parseExcelFile(file: File): Promise<MyRowData[]> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      const data = e.target?.result;
      const workbook = XLSX.read(data, { type: 'binary' });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];

      // Get headers and validate columns
      const rows = XLSX.utils.sheet_to_json<string[]>(sheet, { header: 1 });
      const headerRow = rows[0] as string[]; // Assumes first row is the header

      if (!validateColumns(headerRow)) {
        reject(new Error(`Missing required columns: ${REQUIRED_COLUMNS.join(', ')}`));
        return;
      }

      // If columns are valid, parse JSON data with headers
      const jsonData = XLSX.utils.sheet_to_json<MyRowData>(sheet, { header: 1, defval: "" }) as MyRowData[];
      resolve(jsonData);
    };
    
    reader.onerror = (error) => reject(error);
    reader.readAsBinaryString(file);
  });
}
