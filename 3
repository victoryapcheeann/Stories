To adapt the solution for TypeScript, you'll need to define types for `editedCells`, `setEditedCells`, and other relevant functions. Here's how you can implement it using TypeScript:

### Step 1: Define the Context for `editedCells` in TypeScript

First, create your context with proper types for `editedCells` and `setEditedCells`.

```tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';

// Define the shape of each edited cell
interface EditedCell {
  rowId: number | string;
  field: string;
}

// Define the context type
interface EditedCellsContextType {
  editedCells: EditedCell[];
  setEditedCells: React.Dispatch<React.SetStateAction<EditedCell[]>>;
}

// Create context with a default value
const EditedCellsContext = createContext<EditedCellsContextType | undefined>(undefined);

// Custom hook to use the EditedCellsContext
export const useEditedCells = (): EditedCellsContextType => {
  const context = useContext(EditedCellsContext);
  if (!context) {
    throw new Error('useEditedCells must be used within a EditedCellsProvider');
  }
  return context;
};

// Provider component with children typed as ReactNode
export const EditedCellsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [editedCells, setEditedCells] = useState<EditedCell[]>([]);

  return (
    <EditedCellsContext.Provider value={{ editedCells, setEditedCells }}>
      {children}
    </EditedCellsContext.Provider>
  );
};
```

### Step 2: Wrap Your App with the Provider

In the root or main component, wrap your application with the `EditedCellsProvider`:

```tsx
import { EditedCellsProvider } from './EditedCellsContext'; // Adjust the path as necessary
import YourAgGridComponent from './YourAgGridComponent'; // Adjust the path as necessary

const App: React.FC = () => {
  return (
    <EditedCellsProvider>
      <YourAgGridComponent />
    </EditedCellsProvider>
  );
};

export default App;
```

### Step 3: Access `editedCells` and `setEditedCells` in the Column Definitions File

When defining the `columnDefs` in the separate file, use the `useEditedCells` hook and ensure you add the correct types to the AG Grid cell functions.

```tsx
import { useEditedCells } from './EditedCellsContext'; // Adjust the path as necessary
import { ColDef } from 'ag-grid-community'; // Import types from ag-grid

const columnDefs = (): ColDef[] => {
  const { editedCells } = useEditedCells();

  const getCellStyle = (params: any) => {
    const cellIsEdited = editedCells.some(cell =>
      cell.rowId === params.data.id && cell.field === params.colDef.field
    );

    if (cellIsEdited) {
      return { backgroundColor: '#FFFFC5' }; // Style for edited cells
    }

    return null;  // Default styling
  };

  return [
    { headerName: 'Column 1', field: 'column1', getCellStyle },
    { headerName: 'Column 2', field: 'column2', getCellStyle },
    // other columns...
  ];
};

export default columnDefs;
```

### Step 4: Update `onCellValueChanged` in the Grid Component

In the component where AG Grid is used, ensure the `onCellValueChanged` event is typed correctly. Use `setEditedCells` from the context.

```tsx
import React from 'react';
import { AgGridReact } from 'ag-grid-react';
import { useEditedCells } from './EditedCellsContext'; // Adjust the path as necessary
import columnDefs from './columnDefs'; // Adjust the path as necessary
import { GridOptions } from 'ag-grid-community'; // Import AG Grid types

const YourAgGridComponent: React.FC = () => {
  const { setEditedCells } = useEditedCells();

  const onCellValueChanged = (event: any) => {
    const { data, colDef } = event;
    const rowId = data.id;
    const field = colDef.field;

    const isChanged = true;  // Add your logic to detect changes

    if (isChanged) {
      setEditedCells((prev) => [...prev, { rowId, field }]);
    }

    event.api.refreshCells({
      force: true,
      rowNodes: [event.node],
    });
  };

  const gridOptions: GridOptions = {
    columnDefs: columnDefs(),
    onCellValueChanged,
    // other grid options...
  };

  return (
    <div className="ag-theme-alpine" style={{ height: '100%', width: '100%' }}>
      <AgGridReact
        gridOptions={gridOptions}
        // other grid props...
      />
    </div>
  );
};

export default YourAgGridComponent;
```

### Key TypeScript Types to Note:
- **`EditedCell`**: This interface represents the shape of each edited cell, including `rowId` and `field`.
- **`EditedCellsContextType`**: The context type that ensures both `editedCells` and `setEditedCells` are correctly typed.
- **`ColDef`**: AG Grid’s column definition type.
- **`GridOptions`**: AG Grid’s options type.

### Conclusion

Using React Context with TypeScript in this way ensures your `editedCells` and `setEditedCells` are globally accessible, type-safe, and manageable from any component. By keeping the state in a centralized context, you avoid prop drilling and make the application more scalable and maintainable.




Yes, moving `editedCells` and `setEditedCells` to a context is a good idea, especially if you're defining `columnDefs` in a different file. This approach will centralize the management of the edited cells, making your state management cleaner and avoiding prop drilling.

Here’s how you can implement it:

### Step 1: Create a Context for `editedCells`

Create a new context that will provide access to `editedCells` and `setEditedCells` throughout your application.

```javascript
import React, { createContext, useContext, useState } from 'react';

// Create a context
const EditedCellsContext = createContext();

// Custom hook to use the EditedCellsContext
export const useEditedCells = () => useContext(EditedCellsContext);

// Provider component
export const EditedCellsProvider = ({ children }) => {
  const [editedCells, setEditedCells] = useState([]);

  return (
    <EditedCellsContext.Provider value={{ editedCells, setEditedCells }}>
      {children}
    </EditedCellsContext.Provider>
  );
};
```

### Step 2: Wrap Your App with the Provider

In your main component (or wherever appropriate), wrap your application or specific parts of it in the `EditedCellsProvider`.

```javascript
import { EditedCellsProvider } from './EditedCellsContext'; // Adjust the path as needed
import YourAgGridComponent from './YourAgGridComponent'; // Adjust the path as needed

const App = () => {
  return (
    <EditedCellsProvider>
      <YourAgGridComponent />
    </EditedCellsProvider>
  );
};

export default App;
```

### Step 3: Access `editedCells` and `setEditedCells` in Any Component

Now, in your component where `columnDefs` is defined, you can use the `useEditedCells` hook to access `editedCells` and `setEditedCells`:

```javascript
import { useEditedCells } from './EditedCellsContext'; // Adjust the path as needed

const columnDefs = () => {
  const { editedCells } = useEditedCells();

  const getCellStyle = (params) => {
    const cellIsEdited = editedCells.some(cell =>
      cell.rowId === params.data.id && cell.field === params.colDef.field
    );

    if (cellIsEdited) {
      return { backgroundColor: '#FFFFC5' }; // Style for edited cells
    }

    return null;  // Default styling
  };

  return [
    { headerName: 'Column 1', field: 'column1', getCellStyle },
    { headerName: 'Column 2', field: 'column2', getCellStyle },
    // other columns...
  ];
};

export default columnDefs;
```

### Step 4: Update `onCellValueChanged` in the Component Using the Grid

In the component where AG Grid is used, access `setEditedCells` from the context and use it to update the edited cells:

```javascript
import { useEditedCells } from './EditedCellsContext'; // Adjust the path as needed

const YourAgGridComponent = () => {
  const { setEditedCells } = useEditedCells();

  const onCellValueChanged = (event) => {
    const { data, colDef } = event;
    const rowId = data.id;
    const field = colDef.field;

    const isChanged = true;  // Your logic for detecting change

    if (isChanged) {
      setEditedCells((prev) => [...prev, { rowId, field }]);
    }

    event.api.refreshCells({
      force: true,
      rowNodes: [event.node],
    });
  };

  return (
    <AgGridReact
      columnDefs={columnDefs()}
      onCellValueChanged={onCellValueChanged}
      // other AG Grid properties...
    />
  );
};

export default YourAgGridComponent;
```

### Why This Is a Good Idea
- **Centralized state management**: By using React’s Context API, you manage the state for `editedCells` in one place, making it accessible to any component without prop drilling.
- **Better separation of concerns**: You can keep your `columnDefs` logic separate from the component where AG Grid is implemented, but still access the `editedCells` state where it's needed.
- **Scalable solution**: This approach makes your code more modular and scalable, which is especially helpful if the application grows and multiple components need to interact with the grid state.

By following this approach, your `editedCells` and `setEditedCells` will be managed globally and accessible wherever you need them.




The issue you're encountering with AG Grid, where the background color of the edited cells spills over to the entire column after filtering and unfiltering, is likely due to how the `cellStyle` or `cellClass` is being applied. When you apply styles directly to cells, AG Grid will attempt to re-render the grid after certain actions (like filtering), and if the state tracking edited cells isn't properly maintained, it can apply styles indiscriminately to entire columns instead of individual cells.

To solve this problem, you need to make sure that you're applying the background color only to specific cells, even after filtering. Here's how to address this:

### Solution: Ensure Consistent Style Application Based on State

1. **Track Edited Cells**: Ensure that you are maintaining a list of edited cells, indexed by their row ID and column field. This will allow you to apply styles only to those specific cells, even when filtering or unfiltering.

2. **Update `getCellStyle` or `getCellClass` Dynamically**: You should use `getCellStyle` (or `getCellClass`) to conditionally apply the background color based on whether a cell was edited, and make sure this logic does not apply styles to an entire column.

3. **Ensure Proper Refresh on Filtering**: When filters are applied or removed, ensure that the grid properly refreshes the cell styles based on the tracked edited cells.

Here’s a breakdown of how you can manage this.

### Step 1: Track Edited Cells in State

Ensure that you have a state or ref that stores a list of edited cells:

```javascript
const [editedCells, setEditedCells] = useState([]);
```

Each edited cell can be stored as an object with `rowId` and `field` (the column key):

```javascript
const onCellValueChanged = (event) => {
  const { data, colDef } = event;
  const rowId = data.id;  // Your row identifier
  const field = colDef.field;  // Column field

  // Check if the data changed and update the edited cells list
  const isChanged = true;  // Your logic to detect changes
  
  if (isChanged) {
    setEditedCells((prev) => [...prev, { rowId, field }]);
  }

  event.api.refreshCells({
    force: true,
    rowNodes: [event.node],  // Refresh the specific row
  });
};
```

### Step 2: Apply Styles Conditionally with `getCellStyle`

Now, use the `getCellStyle` function to check if a cell is in the `editedCells` list, and apply styles accordingly:

```javascript
const getCellStyle = (params) => {
  const cellIsEdited = editedCells.some(cell => 
    cell.rowId === params.data.id && cell.field === params.colDef.field
  );

  if (cellIsEdited) {
    return { backgroundColor: '#FFFFC5' }; // Style for edited cells
  }

  return null;  // Default styling
};
```

### Step 3: Ensure Proper Refresh on Filter Change

To prevent the style from spilling over to the whole column after filtering, you need to refresh the cells properly after filters are applied or removed. You can use the `onFilterChanged` event to trigger a refresh:

```javascript
const onFilterChanged = (params) => {
  params.api.refreshCells({
    force: true,
  });
};
```

Add this event listener to your AG Grid component:

```jsx
<AgGridReact
  columnDefs={[
    { headerName: 'Column 1', field: 'column1', getCellStyle },
    { headerName: 'Column 2', field: 'column2', getCellStyle },
    // other columns...
  ]}
  onCellValueChanged={onCellValueChanged}
  onFilterChanged={onFilterChanged}
  // other AG Grid properties...
/>
```

### Step 4: Use the Right Refresh Method

If you are experiencing issues with filtering or other actions that might cause unexpected behavior, try using `refreshCells()` or `refreshClientSideRowModel()` after the grid actions to ensure proper re-rendering:

```javascript
params.api.refreshClientSideRowModel('filter');
```

This forces AG Grid to refresh the internal data model, which should respect the styles you set on individual cells rather than applying them to the whole column.

### Complete Example

```javascript
import React, { useState } from 'react';
import { AgGridReact } from 'ag-grid-react';

const YourAgGridComponent = () => {
  const [editedCells, setEditedCells] = useState([]);

  const getCellStyle = (params) => {
    const cellIsEdited = editedCells.some(cell => 
      cell.rowId === params.data.id && cell.field === params.colDef.field
    );

    if (cellIsEdited) {
      return { backgroundColor: '#FFFFC5' }; // Style for edited cells
    }

    return null;  // Default styling
  };

  const onCellValueChanged = (event) => {
    const { data, colDef } = event;
    const rowId = data.id;
    const field = colDef.field;

    const isChanged = true;  // Your logic for detecting change

    if (isChanged) {
      setEditedCells((prev) => [...prev, { rowId, field }]);
    }

    event.api.refreshCells({
      force: true,
      rowNodes: [event.node],
    });
  };

  const onFilterChanged = (params) => {
    params.api.refreshCells({
      force: true,
    });
  };

  const columnDefs = [
    { headerName: 'Column 1', field: 'column1', getCellStyle },
    { headerName: 'Column 2', field: 'column2', getCellStyle },
    // other columns...
  ];

  return (
    <AgGridReact
      columnDefs={columnDefs}
      onCellValueChanged={onCellValueChanged}
      onFilterChanged={onFilterChanged}
      // other AG Grid properties...
    />
  );
};

export default YourAgGridComponent;
```

### Conclusion
By maintaining a proper record of edited cells and using `getCellStyle` dynamically for each cell, you can ensure that only the intended cells are styled, even after filtering or other actions in AG Grid. You also need to make sure the grid properly refreshes to avoid styles being applied to entire columns.
