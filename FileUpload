Here’s the TypeScript version of **Example 2** that allows for multiple file uploads using drag-and-drop without any external libraries:

### Drag-and-Drop Multiple File Upload in TypeScript

```tsx
import React, { useState, DragEvent, ChangeEvent } from 'react';

const DragAndDropUpload: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]); // Multiple files

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles && droppedFiles.length > 0) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(droppedFiles)]);
      e.dataTransfer.clearData();
    }
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(e.target.files)]);
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Handle the file upload logic here
    console.log('Files uploaded:', files.map((file) => file.name));
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className="dropzone"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer',
        }}
      >
        <p>Drag and drop files here or click to upload</p>
        <input
          type="file"
          onChange={handleFileSelect}
          multiple
          style={{ display: 'none' }}
          id="fileInput"
        />
      </div>
      {files.length > 0 && (
        <div>
          <h4>Files to upload:</h4>
          <ul>
            {files.map((file, index) => (
              <li key={index}>{file.name}</li>
            ))}
          </ul>
        </div>
      )}
      <button type="submit">Upload Files</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Key Points:
1. **Multiple Files:** The `useState<File[]>` stores multiple files, and both drag-and-drop and file selection can handle multiple files at once.
2. **File Input:** The `multiple` attribute on the `<input>` element allows selecting multiple files at once.
3. **File List:** The selected files are displayed as a list so the user can see the files before uploading.
4. **Array.from:** Converts the `FileList` object to an array of files to update the state correctly for multiple file handling.

### CSS Styling (Optional):

```css
.dropzone {
  width: 300px;
  height: 200px;
  border: 2px dashed #ccc;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  cursor: pointer;
}
```

### How it Works:
- **Drag-and-Drop:** When a user drags and drops files onto the dropzone, the `handleDrop` function adds the files to the state.
- **File Selection:** Users can also use the file input element to select multiple files via the file dialog.
- **Submit:** When the form is submitted, the files are logged, and you can implement the actual upload logic (e.g., sending files to a server).

This example handles both drag-and-drop and manual file selection, with multiple file support in TypeScript.






Here are some different examples of how you can handle file uploads in React, from basic to more advanced use cases. These examples include handling basic file inputs, drag-and-drop functionality, and using libraries like `react-dropzone`.

### Example 1: Basic File Upload with Input Element

This is the most basic way to handle file uploads in React using a simple `<input>` element.

```jsx
import React, { useState } from 'react';

const FileUpload = () => {
  const [file, setFile] = useState(null);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (file) {
      const formData = new FormData();
      formData.append('file', file);
      // Post to your backend or handle the file
      console.log('File uploaded:', file.name);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="file" onChange={handleFileChange} />
      <button type="submit">Upload</button>
    </form>
  );
};

export default FileUpload;
```

### Example 2: Drag-and-Drop File Upload (Without Libraries)

This example shows how to implement a basic drag-and-drop file upload.

```jsx
import React, { useState } from 'react';

const DragAndDropUpload = () => {
  const [file, setFile] = useState(null);
  const [dragActive, setDragActive] = useState(false);

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragActive(true);
  };

  const handleDragLeave = () => {
    setDragActive(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      setFile(e.dataTransfer.files[0]);
      e.dataTransfer.clearData();
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (file) {
      console.log('File uploaded:', file.name);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className={`dropzone ${dragActive ? 'active' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer'
        }}
      >
        {file ? <p>{file.name}</p> : <p>Drag and drop a file here or click to upload</p>}
      </div>
      <button type="submit">Upload</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Example 3: Using `react-dropzone` Library

This is an example using the `react-dropzone` library to handle drag-and-drop functionality. This library simplifies the drag-and-drop implementation and provides useful features such as file validation.

1. **Install the library**:
   ```
   npm install react-dropzone
   ```

2. **File Upload with `react-dropzone`**:

```jsx
import React, { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

const DropzoneUpload = () => {
  const onDrop = useCallback((acceptedFiles) => {
    console.log('Files dropped:', acceptedFiles);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: 'image/*', // Accept only images
    multiple: false    // Accept only one file at a time
  });

  return (
    <div {...getRootProps()} style={{
      border: '2px dashed #ccc',
      padding: '20px',
      textAlign: 'center',
      cursor: 'pointer'
    }}>
      <input {...getInputProps()} />
      {
        isDragActive ?
          <p>Drop the file here...</p> :
          <p>Drag and drop a file, or click to select one</p>
      }
    </div>
  );
};

export default DropzoneUpload;
```

### Example 4: Uploading Files to a Server (Backend Example)

Here’s an extended example where we upload files to a backend server. The file is wrapped in `FormData` and sent to the backend using the Fetch API.

```jsx
import React, { useState } from 'react';

const FileUploadToServer = () => {
  const [file, setFile] = useState(null);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (file) {
      const formData = new FormData();
      formData.append('file', file);

      // Upload file to the server
      const response = await fetch('/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();
      console.log('File uploaded successfully', result);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="file" onChange={handleFileChange} />
      <button type="submit">Upload to Server</button>
    </form>
  );
};

export default FileUploadToServer;
```

In this case, you’ll need a backend that accepts file uploads at the `/upload` route, such as a FastAPI or Express.js server, to handle the file upload.

---

These are basic and customizable examples for file uploads in React, covering different methods like input file selection, drag-and-drop functionality, and file uploads using third-party libraries or uploading files to a server.
