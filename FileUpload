To make the component reusable by allowing you to pass `files` and `setFiles` as props, you can modify the `DragAndDropUpload` component to accept these as parameters. This will allow you to manage the file state outside the component and reuse it wherever you need.

### Updated Code to Accept `files` and `setFiles` as Props

```tsx
import React, { DragEvent, ChangeEvent, useRef } from 'react';

interface DragAndDropUploadProps {
  multiple?: boolean; // Optional prop to allow single or multiple file upload
  files: File[]; // Array of files to manage externally
  setFiles: React.Dispatch<React.SetStateAction<File[]>>; // State updater function for the files
}

const DragAndDropUpload: React.FC<DragAndDropUploadProps> = ({ multiple = true, files, setFiles }) => {
  const inputRef = useRef<HTMLInputElement | null>(null);

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles && droppedFiles.length > 0) {
      if (multiple) {
        setFiles((prevFiles) => [...prevFiles, ...Array.from(droppedFiles)]);
      } else {
        setFiles(Array.from(droppedFiles).slice(0, 1)); // Replace with single file
      }
      e.dataTransfer.clearData();
    }
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files;
    if (!selectedFiles) return;

    if (multiple) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(selectedFiles)]);
    } else {
      setFiles(Array.from(selectedFiles).slice(0, 1)); // Replace with single file
    }
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));
  };

  const handleClick = () => {
    if (inputRef.current) {
      inputRef.current.click();
    }
  };

  return (
    <div>
      <div
        className="dropzone"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        onClick={handleClick}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer',
        }}
      >
        <p>Drag and drop files here or click to upload</p>
        <input
          type="file"
          onChange={handleFileSelect}
          multiple={multiple} // Allow multiple or single file selection
          ref={inputRef}
          style={{ display: 'none' }}
        />
      </div>

      {files.length > 0 && (
        <div>
          <h4>Files to upload:</h4>
          <ul>
            {files.map((file, index) => (
              <li key={index}>
                {file.name}
                <button type="button" onClick={() => handleRemoveFile(index)}>
                  Remove
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default DragAndDropUpload;
```

### Explanation:

1. **Props `files` and `setFiles`**:
   - `files`: This is the array of `File` objects that will be managed externally.
   - `setFiles`: This is the state setter function to update the `files` array externally.

2. **Removed Internal State**: 
   - The component no longer manages its own state for the files, so `useState` is not needed inside the component.
   - The state is fully managed outside the component, and `files` and `setFiles` are passed in as props.

### Example Usage:

In a parent component, you can manage the file state and pass it to `DragAndDropUpload`.

```tsx
import React, { useState } from 'react';
import DragAndDropUpload from './DragAndDropUpload'; // Assuming DragAndDropUpload is in the same folder

const ParentComponent: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]);

  return (
    <div>
      <h1>File Upload</h1>
      <DragAndDropUpload
        multiple={true} // Set to false for single file
        files={files}
        setFiles={setFiles}
      />
      <button onClick={() => console.log(files)}>Submit Files</button>
    </div>
  );
};

export default ParentComponent;
```

### Key Features:
1. **Single or Multiple File Upload**: Controlled by the `multiple` prop passed to `DragAndDropUpload`. If `multiple` is `false`, only one file is allowed at a time, and it replaces the previous file.
   
2. **File State Controlled in Parent**: The parent component manages the state (`files` and `setFiles`), making it easier to reuse the file upload logic in different parts of your application.

Now, you can reuse the `DragAndDropUpload` component and control file uploads (whether single or multiple) from the parent component. Let me know if this works for your use case!





Here’s how you can modify the `DragAndDropUpload` component to allow for either **single file** or **multiple file** uploads based on a prop parameter. If the upload is set to single file, the selected file will replace the previous one.

### Updated Code with Single or Multiple File Upload Option

```tsx
import React, { useState, DragEvent, ChangeEvent, useRef } from 'react';

interface DragAndDropUploadProps {
  multiple?: boolean; // Optional prop to allow single or multiple file upload
}

const DragAndDropUpload: React.FC<DragAndDropUploadProps> = ({ multiple = true }) => {
  const [files, setFiles] = useState<File[]>([]);
  const inputRef = useRef<HTMLInputElement | null>(null);

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles && droppedFiles.length > 0) {
      if (multiple) {
        setFiles((prevFiles) => [...prevFiles, ...Array.from(droppedFiles)]);
      } else {
        setFiles(Array.from(droppedFiles).slice(0, 1)); // Replace with single file
      }
      e.dataTransfer.clearData();
    }
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files;
    if (!selectedFiles) return;

    if (multiple) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(selectedFiles)]);
    } else {
      setFiles(Array.from(selectedFiles).slice(0, 1)); // Replace with single file
    }
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log('Files uploaded:', files.map((file) => file.name));
  };

  const handleClick = () => {
    if (inputRef.current) {
      inputRef.current.click();
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className="dropzone"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        onClick={handleClick}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer',
        }}
      >
        <p>Drag and drop files here or click to upload</p>
        <input
          type="file"
          onChange={handleFileSelect}
          multiple={multiple} // This will allow or disallow multiple file selection in the input
          ref={inputRef}
          style={{ display: 'none' }}
        />
      </div>

      {files.length > 0 && (
        <div>
          <h4>Files to upload:</h4>
          <ul>
            {files.map((file, index) => (
              <li key={index}>
                {file.name}
                <button type="button" onClick={() => handleRemoveFile(index)}>
                  Remove
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}

      <button type="submit">Upload Files</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Key Changes:
1. **`multiple` Prop**: 
   - The `multiple` prop is passed to the component to determine whether multiple file uploads are allowed. By default, it is set to `true` (allow multiple files). You can set it to `false` for single file upload.
   
2. **Conditional Logic**:
   - If `multiple` is `true`, files are appended to the list (`[...prevFiles, ...Array.from(files)]`).
   - If `multiple` is `false`, only one file is allowed at a time, and the selected file replaces the previous one (`Array.from(files).slice(0, 1)`).
   
3. **`multiple={multiple}`** in the `<input>` element:
   - The `multiple` attribute of the `<input>` element will be set to `true` or `false` depending on the prop, which affects whether users can select multiple files.

### Example Usage:

1. **Single File Upload (replace previous file):**

```tsx
<DragAndDropUpload multiple={false} />
```

2. **Multiple File Upload (default behavior):**

```tsx
<DragAndDropUpload multiple={true} />
```

If you pass `multiple={false}`, users can only upload one file at a time, and any new file selected will replace the previous one. For multiple files, the user can upload multiple files and see them listed.

Let me know if this works for you!







To fix the issue where clicking to upload files is not working, the problem likely stems from the fact that you are hiding the file input with `display: none;`, but you aren't providing a way to trigger it when the user clicks on the drop zone.

To resolve this, you need to programmatically trigger the hidden file input when the user clicks on the drop zone. Here’s how you can modify your code to make it work:

### Updated Code with Clicking to Upload Files

```tsx
import React, { useState, DragEvent, ChangeEvent, useRef } from 'react';

const DragAndDropUpload: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]);
  const inputRef = useRef<HTMLInputElement | null>(null); // Ref to access hidden input

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles && droppedFiles.length > 0) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(droppedFiles)]);
      e.dataTransfer.clearData();
    }
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files;
    if (!selectedFiles) return;

    setFiles((prevFiles) => [...prevFiles, ...Array.from(selectedFiles)]);
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log('Files uploaded:', files.map((file) => file.name));
  };

  const handleClick = () => {
    if (inputRef.current) {
      inputRef.current.click(); // Programmatically trigger the file input click
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className="dropzone"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        onClick={handleClick} // Allow click to open file dialog
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer',
        }}
      >
        <p>Drag and drop files here or click to upload</p>
        <input
          type="file"
          onChange={handleFileSelect}
          multiple
          ref={inputRef} // Reference the input so we can trigger it
          style={{ display: 'none' }}
        />
      </div>

      {files.length > 0 && (
        <div>
          <h4>Files to upload:</h4>
          <ul>
            {files.map((file, index) => (
              <li key={index}>
                {file.name}
                <button type="button" onClick={() => handleRemoveFile(index)}>
                  Remove
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}

      <button type="submit">Upload Files</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Key Fixes:
1. **`useRef` for the Input Element**: 
   - I added a `ref` (`inputRef`) for the `<input type="file">` element to allow programmatic control of the input.
   
2. **`onClick` Handler for the Drop Zone**: 
   - When the drop zone is clicked, the `handleClick` function triggers the hidden file input’s click event using `inputRef.current.click()`.

Now, when the user clicks on the drop zone, the file input will open, allowing them to manually select files. The drag-and-drop functionality remains intact.

Let me know if this resolves the issue!











https://stackoverflow.com/questions/61458062/sql-column-naming-best-practice-should-i-use-abbreviation
https://stackoverflow.com/questions/7662/database-table-and-column-naming-conventions

Yes, the **AdventureWorks** database is a popular sample database provided by Microsoft, and you can find online lists of its tables and columns. Here are some **examples** of tables with long column names:

### Example 1: Table `Person.Person`
This table stores information about people in the AdventureWorks database.

**Columns:**
- `BusinessEntityID`
- `PersonType`
- `NameStyle`
- `Title`
- `FirstName`
- `MiddleName`
- `LastName`
- `Suffix`
- `EmailPromotion`
- `AdditionalContactInfo`
- `Demographics`

### Example 2: Table `Sales.SalesOrderDetail`
This table stores information about individual sales order details.

**Columns:**
- `SalesOrderID`
- `SalesOrderDetailID`
- `CarrierTrackingNumber`
- `OrderQty`
- `ProductID`
- `SpecialOfferID`
- `UnitPrice`
- `UnitPriceDiscount`
- `LineTotal`
- `rowguid`
- `ModifiedDate`

### Example 3: Table `Production.ProductDocument`
This table links products and their associated documents.

**Columns:**
- `ProductID`
- `DocumentNode`
- `ModifiedDate`

### Example 4: Table `HumanResources.EmployeeDepartmentHistory`
This table tracks employees’ department history over time.

**Columns:**
- `BusinessEntityID`
- `DepartmentID`
- `ShiftID`
- `StartDate`
- `EndDate`
- `ModifiedDate`

### Example 5: Table `Purchasing.PurchaseOrderDetail`
This table tracks the details of purchase orders.

**Columns:**
- `PurchaseOrderID`
- `PurchaseOrderDetailID`
- `DueDate`
- `OrderQty`
- `ProductID`
- `UnitPrice`
- `LineTotal`
- `ReceivedQty`
- `RejectedQty`
- `StockedQty`
- `ModifiedDate`

### Example 6: Table `Sales.Customer`
This table stores information about customers.

**Columns:**
- `CustomerID`
- `PersonID`
- `StoreID`
- `TerritoryID`
- `AccountNumber`
- `rowguid`
- `ModifiedDate`

These examples give you an idea of the column names and structure in AdventureWorks. Some column names are longer and descriptive, reflecting the purpose of the data they store. You can easily find the entire schema for AdventureWorks online, but this should give you a good starting point.

If you need a full list, the Microsoft documentation or SQL Server queries would be the best resource.


When naming SQL tables and columns, **clarity and readability** should be prioritized to make the database schema easy to understand and maintain. Here’s a breakdown of the options you provided:

1. **`Iden` vs. `Identification`**:
   - **Better choice: `Identification`**
     - **Reason**: The full form, `Identification`, is more descriptive and leaves no room for confusion. `Iden` could easily be misinterpreted or forgotten over time, especially by new developers or those unfamiliar with the project.

2. **`Apprv` vs. `Approval`**:
   - **Better choice: `Approval`**
     - **Reason**: Again, `Approval` is clearer and more intuitive. While `Apprv` saves a few characters, the benefit of readability and reduced cognitive load outweighs the brevity. Developers will immediately understand the context when seeing `Approval`.

3. **`Bus` vs. `Business`**:
   - **Better choice: `Business`**
     - **Reason**: `Business` is clearer and less ambiguous. `Bus` could be mistaken for a transportation reference, especially in a global team where context might differ. Using `Business` avoids any potential confusion.

### **Why Full Names Are Better for SQL Table and Column Naming**:
- **Readability**: Full names make it easier for developers to understand what the data represents without needing extra documentation or guessing.
- **Consistency**: Using full, descriptive names promotes consistency, which is essential for collaboration and long-term maintenance.
- **Onboarding**: New team members can quickly understand the database schema without having to decipher abbreviations.
- **Avoid Ambiguity**: Abbreviations can be vague or have multiple meanings, leading to potential misunderstandings.

---

### **Guidelines for SQL Table and Column Naming**:
1. **Be Descriptive**: Choose names that clearly describe the data. Avoid unnecessary abbreviations.
2. **Consistency**: Stick to a consistent naming convention across the database (e.g., `CamelCase` or `snake_case`).
3. **Avoid Ambiguations**: Avoid abbreviations unless they are universally understood (e.g., `ID` for `Identifier`).
4. **Plural for Tables**: If your table stores multiple entities, consider using plural forms (e.g., `Customers` instead of `Customer`).

By choosing full and clear names like `Identification`, `Approval`, and `Business`, you’ll create a more maintainable and developer-friendly database schema.



Here’s an updated version of the code that includes the functionality to remove a file from the list of uploaded files.

### Full Code with File Deletion

```tsx
import React, { useState, DragEvent, ChangeEvent } from 'react';

const DragAndDropUpload: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]); // State to store selected files

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles && droppedFiles.length > 0) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(droppedFiles)]);
      e.dataTransfer.clearData();
    }
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files;
    if (!selectedFiles) return;  // Early return if no files were selected

    setFiles((prevFiles) => [...prevFiles, ...Array.from(selectedFiles)]);
  };

  const handleRemoveFile = (index: number) => {
    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index)); // Remove file by index
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Handle the file upload logic here
    console.log('Files uploaded:', files.map((file) => file.name));
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className="dropzone"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer',
        }}
      >
        <p>Drag and drop files here or click to upload</p>
        <input
          type="file"
          onChange={handleFileSelect}
          multiple
          style={{ display: 'none' }}
          id="fileInput"
        />
      </div>

      {files.length > 0 && (
        <div>
          <h4>Files to upload:</h4>
          <ul>
            {files.map((file, index) => (
              <li key={index}>
                {file.name}
                <button type="button" onClick={() => handleRemoveFile(index)}>
                  Remove
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}

      <button type="submit">Upload Files</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Explanation:
1. **`handleRemoveFile` Function**: This function removes a file from the list by filtering the files and excluding the file at the specified index.
   
2. **Rendering the List of Files**: Each file is displayed with a remove button next to it. When the user clicks "Remove," the `handleRemoveFile` function is triggered, which updates the state without the removed file.

3. **Early Return in `handleFileSelect`**: In case no files are selected, we avoid any further processing by returning early.

This approach allows the user to add files via drag-and-drop or by selecting files manually, as well as remove any file they no longer want to upload before submitting.

Let me know if it works as expected or if you need further adjustments!



Here’s the TypeScript version of **Example 2** that allows for multiple file uploads using drag-and-drop without any external libraries:

### Drag-and-Drop Multiple File Upload in TypeScript

```tsx
import React, { useState, DragEvent, ChangeEvent } from 'react';

const DragAndDropUpload: React.FC = () => {
  const [files, setFiles] = useState<File[]>([]); // Multiple files

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFiles = e.dataTransfer.files;
    if (droppedFiles && droppedFiles.length > 0) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(droppedFiles)]);
      e.dataTransfer.clearData();
    }
  };

  const handleFileSelect = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFiles((prevFiles) => [...prevFiles, ...Array.from(e.target.files)]);
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Handle the file upload logic here
    console.log('Files uploaded:', files.map((file) => file.name));
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className="dropzone"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer',
        }}
      >
        <p>Drag and drop files here or click to upload</p>
        <input
          type="file"
          onChange={handleFileSelect}
          multiple
          style={{ display: 'none' }}
          id="fileInput"
        />
      </div>
      {files.length > 0 && (
        <div>
          <h4>Files to upload:</h4>
          <ul>
            {files.map((file, index) => (
              <li key={index}>{file.name}</li>
            ))}
          </ul>
        </div>
      )}
      <button type="submit">Upload Files</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Key Points:
1. **Multiple Files:** The `useState<File[]>` stores multiple files, and both drag-and-drop and file selection can handle multiple files at once.
2. **File Input:** The `multiple` attribute on the `<input>` element allows selecting multiple files at once.
3. **File List:** The selected files are displayed as a list so the user can see the files before uploading.
4. **Array.from:** Converts the `FileList` object to an array of files to update the state correctly for multiple file handling.

### CSS Styling (Optional):

```css
.dropzone {
  width: 300px;
  height: 200px;
  border: 2px dashed #ccc;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  cursor: pointer;
}
```

### How it Works:
- **Drag-and-Drop:** When a user drags and drops files onto the dropzone, the `handleDrop` function adds the files to the state.
- **File Selection:** Users can also use the file input element to select multiple files via the file dialog.
- **Submit:** When the form is submitted, the files are logged, and you can implement the actual upload logic (e.g., sending files to a server).

This example handles both drag-and-drop and manual file selection, with multiple file support in TypeScript.






Here are some different examples of how you can handle file uploads in React, from basic to more advanced use cases. These examples include handling basic file inputs, drag-and-drop functionality, and using libraries like `react-dropzone`.

### Example 1: Basic File Upload with Input Element

This is the most basic way to handle file uploads in React using a simple `<input>` element.

```jsx
import React, { useState } from 'react';

const FileUpload = () => {
  const [file, setFile] = useState(null);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    if (file) {
      const formData = new FormData();
      formData.append('file', file);
      // Post to your backend or handle the file
      console.log('File uploaded:', file.name);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="file" onChange={handleFileChange} />
      <button type="submit">Upload</button>
    </form>
  );
};

export default FileUpload;
```

### Example 2: Drag-and-Drop File Upload (Without Libraries)

This example shows how to implement a basic drag-and-drop file upload.

```jsx
import React, { useState } from 'react';

const DragAndDropUpload = () => {
  const [file, setFile] = useState(null);
  const [dragActive, setDragActive] = useState(false);

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragActive(true);
  };

  const handleDragLeave = () => {
    setDragActive(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      setFile(e.dataTransfer.files[0]);
      e.dataTransfer.clearData();
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (file) {
      console.log('File uploaded:', file.name);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div
        className={`dropzone ${dragActive ? 'active' : ''}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        style={{
          border: '2px dashed #ccc',
          padding: '20px',
          textAlign: 'center',
          cursor: 'pointer'
        }}
      >
        {file ? <p>{file.name}</p> : <p>Drag and drop a file here or click to upload</p>}
      </div>
      <button type="submit">Upload</button>
    </form>
  );
};

export default DragAndDropUpload;
```

### Example 3: Using `react-dropzone` Library

This is an example using the `react-dropzone` library to handle drag-and-drop functionality. This library simplifies the drag-and-drop implementation and provides useful features such as file validation.

1. **Install the library**:
   ```
   npm install react-dropzone
   ```

2. **File Upload with `react-dropzone`**:

```jsx
import React, { useCallback } from 'react';
import { useDropzone } from 'react-dropzone';

const DropzoneUpload = () => {
  const onDrop = useCallback((acceptedFiles) => {
    console.log('Files dropped:', acceptedFiles);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: 'image/*', // Accept only images
    multiple: false    // Accept only one file at a time
  });

  return (
    <div {...getRootProps()} style={{
      border: '2px dashed #ccc',
      padding: '20px',
      textAlign: 'center',
      cursor: 'pointer'
    }}>
      <input {...getInputProps()} />
      {
        isDragActive ?
          <p>Drop the file here...</p> :
          <p>Drag and drop a file, or click to select one</p>
      }
    </div>
  );
};

export default DropzoneUpload;
```

### Example 4: Uploading Files to a Server (Backend Example)

Here’s an extended example where we upload files to a backend server. The file is wrapped in `FormData` and sent to the backend using the Fetch API.

```jsx
import React, { useState } from 'react';

const FileUploadToServer = () => {
  const [file, setFile] = useState(null);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (file) {
      const formData = new FormData();
      formData.append('file', file);

      // Upload file to the server
      const response = await fetch('/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();
      console.log('File uploaded successfully', result);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="file" onChange={handleFileChange} />
      <button type="submit">Upload to Server</button>
    </form>
  );
};

export default FileUploadToServer;
```

In this case, you’ll need a backend that accepts file uploads at the `/upload` route, such as a FastAPI or Express.js server, to handle the file upload.

---

These are basic and customizable examples for file uploads in React, covering different methods like input file selection, drag-and-drop functionality, and file uploads using third-party libraries or uploading files to a server.
