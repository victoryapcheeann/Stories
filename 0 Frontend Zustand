import create from 'zustand';
import { persist } from 'zustand/middleware';

// Custom storage object to wrap localStorage
const zustandStorage = {
  getItem: (name: string) => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem(name);
    }
    return null;
  },
  setItem: (name: string, value: string) => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(name, value);
    }
  },
  removeItem: (name: string) => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(name);
    }
  },
};

const useDropdownValueStore = create(
  persist(
    (set) => ({
      applicationNameData: null,
      processIDData: null,
      applicationNameList: [],
      currentApplicationName: [],
      processIDList: null,
      loading: true,

      fetchData: async () => {
        const response = await apiCall('/cda/attribute/create/start');
        if (response.success) {
          const applicationNameData = response.data[0];
          const processIDData = response.data[1];
          const applicationNameList = Object.keys(response.data[0]);
          const processIDList = Object.keys(response.data[1]);

          set({
            applicationNameData,
            processIDData,
            applicationNameList,
            processIDList,
            loading: false,
          });
        }
      },
    }),
    {
      name: 'dropdown-value-store',
      storage: zustandStorage, // Use the custom storage object
    }
  )
);

export default useDropdownValueStore;
